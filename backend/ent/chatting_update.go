// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/chatting"
	"FinalProject/ent/predicate"
	"FinalProject/ent/user"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChattingUpdate is the builder for updating Chatting entities.
type ChattingUpdate struct {
	config
	hooks    []Hook
	mutation *ChattingMutation
}

// Where appends a list predicates to the ChattingUpdate builder.
func (cu *ChattingUpdate) Where(ps ...predicate.Chatting) *ChattingUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetMessage sets the "message" field.
func (cu *ChattingUpdate) SetMessage(s string) *ChattingUpdate {
	cu.mutation.SetMessage(s)
	return cu
}

// SetDateTime sets the "dateTime" field.
func (cu *ChattingUpdate) SetDateTime(t time.Time) *ChattingUpdate {
	cu.mutation.SetDateTime(t)
	return cu
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (cu *ChattingUpdate) SetNillableDateTime(t *time.Time) *ChattingUpdate {
	if t != nil {
		cu.SetDateTime(*t)
	}
	return cu
}

// ClearDateTime clears the value of the "dateTime" field.
func (cu *ChattingUpdate) ClearDateTime() *ChattingUpdate {
	cu.mutation.ClearDateTime()
	return cu
}

// SetChattingWithWhomID sets the "chatting_with_whom" edge to the User entity by ID.
func (cu *ChattingUpdate) SetChattingWithWhomID(id int) *ChattingUpdate {
	cu.mutation.SetChattingWithWhomID(id)
	return cu
}

// SetNillableChattingWithWhomID sets the "chatting_with_whom" edge to the User entity by ID if the given value is not nil.
func (cu *ChattingUpdate) SetNillableChattingWithWhomID(id *int) *ChattingUpdate {
	if id != nil {
		cu = cu.SetChattingWithWhomID(*id)
	}
	return cu
}

// SetChattingWithWhom sets the "chatting_with_whom" edge to the User entity.
func (cu *ChattingUpdate) SetChattingWithWhom(u *User) *ChattingUpdate {
	return cu.SetChattingWithWhomID(u.ID)
}

// SetWhoseIsThisMsgID sets the "whose_is_this_msg" edge to the User entity by ID.
func (cu *ChattingUpdate) SetWhoseIsThisMsgID(id int) *ChattingUpdate {
	cu.mutation.SetWhoseIsThisMsgID(id)
	return cu
}

// SetNillableWhoseIsThisMsgID sets the "whose_is_this_msg" edge to the User entity by ID if the given value is not nil.
func (cu *ChattingUpdate) SetNillableWhoseIsThisMsgID(id *int) *ChattingUpdate {
	if id != nil {
		cu = cu.SetWhoseIsThisMsgID(*id)
	}
	return cu
}

// SetWhoseIsThisMsg sets the "whose_is_this_msg" edge to the User entity.
func (cu *ChattingUpdate) SetWhoseIsThisMsg(u *User) *ChattingUpdate {
	return cu.SetWhoseIsThisMsgID(u.ID)
}

// Mutation returns the ChattingMutation object of the builder.
func (cu *ChattingUpdate) Mutation() *ChattingMutation {
	return cu.mutation
}

// ClearChattingWithWhom clears the "chatting_with_whom" edge to the User entity.
func (cu *ChattingUpdate) ClearChattingWithWhom() *ChattingUpdate {
	cu.mutation.ClearChattingWithWhom()
	return cu
}

// ClearWhoseIsThisMsg clears the "whose_is_this_msg" edge to the User entity.
func (cu *ChattingUpdate) ClearWhoseIsThisMsg() *ChattingUpdate {
	cu.mutation.ClearWhoseIsThisMsg()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChattingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChattingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChattingUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChattingUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChattingUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ChattingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chatting.Table,
			Columns: chatting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chatting.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chatting.FieldMessage,
		})
	}
	if value, ok := cu.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chatting.FieldDateTime,
		})
	}
	if cu.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: chatting.FieldDateTime,
		})
	}
	if cu.mutation.ChattingWithWhomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatting.ChattingWithWhomTable,
			Columns: []string{chatting.ChattingWithWhomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ChattingWithWhomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatting.ChattingWithWhomTable,
			Columns: []string{chatting.ChattingWithWhomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.WhoseIsThisMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatting.WhoseIsThisMsgTable,
			Columns: []string{chatting.WhoseIsThisMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.WhoseIsThisMsgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatting.WhoseIsThisMsgTable,
			Columns: []string{chatting.WhoseIsThisMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ChattingUpdateOne is the builder for updating a single Chatting entity.
type ChattingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChattingMutation
}

// SetMessage sets the "message" field.
func (cuo *ChattingUpdateOne) SetMessage(s string) *ChattingUpdateOne {
	cuo.mutation.SetMessage(s)
	return cuo
}

// SetDateTime sets the "dateTime" field.
func (cuo *ChattingUpdateOne) SetDateTime(t time.Time) *ChattingUpdateOne {
	cuo.mutation.SetDateTime(t)
	return cuo
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (cuo *ChattingUpdateOne) SetNillableDateTime(t *time.Time) *ChattingUpdateOne {
	if t != nil {
		cuo.SetDateTime(*t)
	}
	return cuo
}

// ClearDateTime clears the value of the "dateTime" field.
func (cuo *ChattingUpdateOne) ClearDateTime() *ChattingUpdateOne {
	cuo.mutation.ClearDateTime()
	return cuo
}

// SetChattingWithWhomID sets the "chatting_with_whom" edge to the User entity by ID.
func (cuo *ChattingUpdateOne) SetChattingWithWhomID(id int) *ChattingUpdateOne {
	cuo.mutation.SetChattingWithWhomID(id)
	return cuo
}

// SetNillableChattingWithWhomID sets the "chatting_with_whom" edge to the User entity by ID if the given value is not nil.
func (cuo *ChattingUpdateOne) SetNillableChattingWithWhomID(id *int) *ChattingUpdateOne {
	if id != nil {
		cuo = cuo.SetChattingWithWhomID(*id)
	}
	return cuo
}

// SetChattingWithWhom sets the "chatting_with_whom" edge to the User entity.
func (cuo *ChattingUpdateOne) SetChattingWithWhom(u *User) *ChattingUpdateOne {
	return cuo.SetChattingWithWhomID(u.ID)
}

// SetWhoseIsThisMsgID sets the "whose_is_this_msg" edge to the User entity by ID.
func (cuo *ChattingUpdateOne) SetWhoseIsThisMsgID(id int) *ChattingUpdateOne {
	cuo.mutation.SetWhoseIsThisMsgID(id)
	return cuo
}

// SetNillableWhoseIsThisMsgID sets the "whose_is_this_msg" edge to the User entity by ID if the given value is not nil.
func (cuo *ChattingUpdateOne) SetNillableWhoseIsThisMsgID(id *int) *ChattingUpdateOne {
	if id != nil {
		cuo = cuo.SetWhoseIsThisMsgID(*id)
	}
	return cuo
}

// SetWhoseIsThisMsg sets the "whose_is_this_msg" edge to the User entity.
func (cuo *ChattingUpdateOne) SetWhoseIsThisMsg(u *User) *ChattingUpdateOne {
	return cuo.SetWhoseIsThisMsgID(u.ID)
}

// Mutation returns the ChattingMutation object of the builder.
func (cuo *ChattingUpdateOne) Mutation() *ChattingMutation {
	return cuo.mutation
}

// ClearChattingWithWhom clears the "chatting_with_whom" edge to the User entity.
func (cuo *ChattingUpdateOne) ClearChattingWithWhom() *ChattingUpdateOne {
	cuo.mutation.ClearChattingWithWhom()
	return cuo
}

// ClearWhoseIsThisMsg clears the "whose_is_this_msg" edge to the User entity.
func (cuo *ChattingUpdateOne) ClearWhoseIsThisMsg() *ChattingUpdateOne {
	cuo.mutation.ClearWhoseIsThisMsg()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChattingUpdateOne) Select(field string, fields ...string) *ChattingUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Chatting entity.
func (cuo *ChattingUpdateOne) Save(ctx context.Context) (*Chatting, error) {
	var (
		err  error
		node *Chatting
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ChattingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChattingUpdateOne) SaveX(ctx context.Context) *Chatting {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChattingUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChattingUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ChattingUpdateOne) sqlSave(ctx context.Context) (_node *Chatting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   chatting.Table,
			Columns: chatting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: chatting.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Chatting.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatting.FieldID)
		for _, f := range fields {
			if !chatting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: chatting.FieldMessage,
		})
	}
	if value, ok := cuo.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: chatting.FieldDateTime,
		})
	}
	if cuo.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: chatting.FieldDateTime,
		})
	}
	if cuo.mutation.ChattingWithWhomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatting.ChattingWithWhomTable,
			Columns: []string{chatting.ChattingWithWhomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ChattingWithWhomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatting.ChattingWithWhomTable,
			Columns: []string{chatting.ChattingWithWhomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.WhoseIsThisMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatting.WhoseIsThisMsgTable,
			Columns: []string{chatting.WhoseIsThisMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.WhoseIsThisMsgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatting.WhoseIsThisMsgTable,
			Columns: []string{chatting.WhoseIsThisMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Chatting{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
