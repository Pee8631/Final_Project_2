// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/chatting"
	"FinalProject/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Chatting is the model entity for the Chatting schema.
type Chatting struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// DateTime holds the value of the "dateTime" field.
	DateTime time.Time `json:"dateTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChattingQuery when eager-loading is set.
	Edges                        ChattingEdges `json:"edges"`
	user_user_chatting_with_whom *int
	user_who_is_owner_this_msg   *int
}

// ChattingEdges holds the relations/edges for other nodes in the graph.
type ChattingEdges struct {
	// ChattingWithWhom holds the value of the chatting_with_whom edge.
	ChattingWithWhom *User `json:"chatting_with_whom,omitempty"`
	// WhoseIsThisMsg holds the value of the whose_is_this_msg edge.
	WhoseIsThisMsg *User `json:"whose_is_this_msg,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ChattingWithWhomOrErr returns the ChattingWithWhom value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChattingEdges) ChattingWithWhomOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.ChattingWithWhom == nil {
			// The edge chatting_with_whom was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.ChattingWithWhom, nil
	}
	return nil, &NotLoadedError{edge: "chatting_with_whom"}
}

// WhoseIsThisMsgOrErr returns the WhoseIsThisMsg value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChattingEdges) WhoseIsThisMsgOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.WhoseIsThisMsg == nil {
			// The edge whose_is_this_msg was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.WhoseIsThisMsg, nil
	}
	return nil, &NotLoadedError{edge: "whose_is_this_msg"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Chatting) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatting.FieldID:
			values[i] = new(sql.NullInt64)
		case chatting.FieldMessage:
			values[i] = new(sql.NullString)
		case chatting.FieldDateTime:
			values[i] = new(sql.NullTime)
		case chatting.ForeignKeys[0]: // user_user_chatting_with_whom
			values[i] = new(sql.NullInt64)
		case chatting.ForeignKeys[1]: // user_who_is_owner_this_msg
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Chatting", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Chatting fields.
func (c *Chatting) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case chatting.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				c.Message = value.String
			}
		case chatting.FieldDateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateTime", values[i])
			} else if value.Valid {
				c.DateTime = value.Time
			}
		case chatting.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_user_chatting_with_whom", value)
			} else if value.Valid {
				c.user_user_chatting_with_whom = new(int)
				*c.user_user_chatting_with_whom = int(value.Int64)
			}
		case chatting.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_who_is_owner_this_msg", value)
			} else if value.Valid {
				c.user_who_is_owner_this_msg = new(int)
				*c.user_who_is_owner_this_msg = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryChattingWithWhom queries the "chatting_with_whom" edge of the Chatting entity.
func (c *Chatting) QueryChattingWithWhom() *UserQuery {
	return (&ChattingClient{config: c.config}).QueryChattingWithWhom(c)
}

// QueryWhoseIsThisMsg queries the "whose_is_this_msg" edge of the Chatting entity.
func (c *Chatting) QueryWhoseIsThisMsg() *UserQuery {
	return (&ChattingClient{config: c.config}).QueryWhoseIsThisMsg(c)
}

// Update returns a builder for updating this Chatting.
// Note that you need to call Chatting.Unwrap() before calling this method if this Chatting
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Chatting) Update() *ChattingUpdateOne {
	return (&ChattingClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Chatting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Chatting) Unwrap() *Chatting {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Chatting is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Chatting) String() string {
	var builder strings.Builder
	builder.WriteString("Chatting(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", message=")
	builder.WriteString(c.Message)
	builder.WriteString(", dateTime=")
	builder.WriteString(c.DateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Chattings is a parsable slice of Chatting.
type Chattings []*Chatting

func (c Chattings) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
