// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/schedule"
	"FinalProject/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Schedule is the model entity for the Schedule schema.
type Schedule struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Activity holds the value of the "activity" field.
	Activity string `json:"activity,omitempty"`
	// Detail holds the value of the "detail" field.
	Detail string `json:"detail,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduleQuery when eager-loading is set.
	Edges                    ScheduleEdges `json:"edges"`
	user_doctor_has_schedule *int
}

// ScheduleEdges holds the relations/edges for other nodes in the graph.
type ScheduleEdges struct {
	// TimeSchedule holds the value of the time_schedule edge.
	TimeSchedule []*ScheduleTime `json:"time_schedule,omitempty"`
	// WhoIsTheOwnerOfThisSchedule holds the value of the who_is_the_owner_of_this_schedule edge.
	WhoIsTheOwnerOfThisSchedule *User `json:"who_is_the_owner_of_this_schedule,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TimeScheduleOrErr returns the TimeSchedule value or an error if the edge
// was not loaded in eager-loading.
func (e ScheduleEdges) TimeScheduleOrErr() ([]*ScheduleTime, error) {
	if e.loadedTypes[0] {
		return e.TimeSchedule, nil
	}
	return nil, &NotLoadedError{edge: "time_schedule"}
}

// WhoIsTheOwnerOfThisScheduleOrErr returns the WhoIsTheOwnerOfThisSchedule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleEdges) WhoIsTheOwnerOfThisScheduleOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.WhoIsTheOwnerOfThisSchedule == nil {
			// The edge who_is_the_owner_of_this_schedule was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.WhoIsTheOwnerOfThisSchedule, nil
	}
	return nil, &NotLoadedError{edge: "who_is_the_owner_of_this_schedule"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Schedule) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case schedule.FieldID:
			values[i] = new(sql.NullInt64)
		case schedule.FieldActivity, schedule.FieldDetail, schedule.FieldStatus:
			values[i] = new(sql.NullString)
		case schedule.ForeignKeys[0]: // user_doctor_has_schedule
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Schedule", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Schedule fields.
func (s *Schedule) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schedule.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case schedule.FieldActivity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field activity", values[i])
			} else if value.Valid {
				s.Activity = value.String
			}
		case schedule.FieldDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value.Valid {
				s.Detail = value.String
			}
		case schedule.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = value.String
			}
		case schedule.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_doctor_has_schedule", value)
			} else if value.Valid {
				s.user_doctor_has_schedule = new(int)
				*s.user_doctor_has_schedule = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTimeSchedule queries the "time_schedule" edge of the Schedule entity.
func (s *Schedule) QueryTimeSchedule() *ScheduleTimeQuery {
	return (&ScheduleClient{config: s.config}).QueryTimeSchedule(s)
}

// QueryWhoIsTheOwnerOfThisSchedule queries the "who_is_the_owner_of_this_schedule" edge of the Schedule entity.
func (s *Schedule) QueryWhoIsTheOwnerOfThisSchedule() *UserQuery {
	return (&ScheduleClient{config: s.config}).QueryWhoIsTheOwnerOfThisSchedule(s)
}

// Update returns a builder for updating this Schedule.
// Note that you need to call Schedule.Unwrap() before calling this method if this Schedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Schedule) Update() *ScheduleUpdateOne {
	return (&ScheduleClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Schedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Schedule) Unwrap() *Schedule {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Schedule is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Schedule) String() string {
	var builder strings.Builder
	builder.WriteString("Schedule(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", activity=")
	builder.WriteString(s.Activity)
	builder.WriteString(", detail=")
	builder.WriteString(s.Detail)
	builder.WriteString(", status=")
	builder.WriteString(s.Status)
	builder.WriteByte(')')
	return builder.String()
}

// Schedules is a parsable slice of Schedule.
type Schedules []*Schedule

func (s Schedules) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
