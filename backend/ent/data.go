// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/data"
	"FinalProject/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Data is the model entity for the Data schema.
type Data struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// IdCardNumber holds the value of the "idCardNumber" field.
	IdCardNumber string `json:"idCardNumber,omitempty"`
	// FirstName holds the value of the "firstName" field.
	FirstName string `json:"firstName,omitempty"`
	// LastName holds the value of the "lastName" field.
	LastName string `json:"lastName,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender int `json:"gender,omitempty"`
	// BrithDate holds the value of the "brithDate" field.
	BrithDate time.Time `json:"brithDate,omitempty"`
	// BloodGroup holds the value of the "bloodGroup" field.
	BloodGroup string `json:"bloodGroup,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DataQuery when eager-loading is set.
	Edges              DataEdges `json:"edges"`
	user_user_has_data *int
}

// DataEdges holds the relations/edges for other nodes in the graph.
type DataEdges struct {
	// WhoIsTheOwnerOfThisData holds the value of the who_is_the_owner_of_this_data edge.
	WhoIsTheOwnerOfThisData *User `json:"who_is_the_owner_of_this_data,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WhoIsTheOwnerOfThisDataOrErr returns the WhoIsTheOwnerOfThisData value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DataEdges) WhoIsTheOwnerOfThisDataOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.WhoIsTheOwnerOfThisData == nil {
			// The edge who_is_the_owner_of_this_data was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.WhoIsTheOwnerOfThisData, nil
	}
	return nil, &NotLoadedError{edge: "who_is_the_owner_of_this_data"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Data) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case data.FieldID, data.FieldGender:
			values[i] = new(sql.NullInt64)
		case data.FieldIdCardNumber, data.FieldFirstName, data.FieldLastName, data.FieldBloodGroup, data.FieldAddress:
			values[i] = new(sql.NullString)
		case data.FieldBrithDate:
			values[i] = new(sql.NullTime)
		case data.ForeignKeys[0]: // user_user_has_data
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Data", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Data fields.
func (d *Data) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case data.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case data.FieldIdCardNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idCardNumber", values[i])
			} else if value.Valid {
				d.IdCardNumber = value.String
			}
		case data.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field firstName", values[i])
			} else if value.Valid {
				d.FirstName = value.String
			}
		case data.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field lastName", values[i])
			} else if value.Valid {
				d.LastName = value.String
			}
		case data.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				d.Gender = int(value.Int64)
			}
		case data.FieldBrithDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field brithDate", values[i])
			} else if value.Valid {
				d.BrithDate = value.Time
			}
		case data.FieldBloodGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bloodGroup", values[i])
			} else if value.Valid {
				d.BloodGroup = value.String
			}
		case data.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				d.Address = value.String
			}
		case data.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_user_has_data", value)
			} else if value.Valid {
				d.user_user_has_data = new(int)
				*d.user_user_has_data = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryWhoIsTheOwnerOfThisData queries the "who_is_the_owner_of_this_data" edge of the Data entity.
func (d *Data) QueryWhoIsTheOwnerOfThisData() *UserQuery {
	return (&DataClient{config: d.config}).QueryWhoIsTheOwnerOfThisData(d)
}

// Update returns a builder for updating this Data.
// Note that you need to call Data.Unwrap() before calling this method if this Data
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Data) Update() *DataUpdateOne {
	return (&DataClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Data entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Data) Unwrap() *Data {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Data is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Data) String() string {
	var builder strings.Builder
	builder.WriteString("Data(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", idCardNumber=")
	builder.WriteString(d.IdCardNumber)
	builder.WriteString(", firstName=")
	builder.WriteString(d.FirstName)
	builder.WriteString(", lastName=")
	builder.WriteString(d.LastName)
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", d.Gender))
	builder.WriteString(", brithDate=")
	builder.WriteString(d.BrithDate.Format(time.ANSIC))
	builder.WriteString(", bloodGroup=")
	builder.WriteString(d.BloodGroup)
	builder.WriteString(", address=")
	builder.WriteString(d.Address)
	builder.WriteByte(')')
	return builder.String()
}

// DataSlice is a parsable slice of Data.
type DataSlice []*Data

func (d DataSlice) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
