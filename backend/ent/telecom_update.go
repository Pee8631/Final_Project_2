// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/predicate"
	"FinalProject/ent/telecom"
	"FinalProject/ent/user"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TelecomUpdate is the builder for updating Telecom entities.
type TelecomUpdate struct {
	config
	hooks    []Hook
	mutation *TelecomMutation
}

// Where appends a list predicates to the TelecomUpdate builder.
func (tu *TelecomUpdate) Where(ps ...predicate.Telecom) *TelecomUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUsername sets the "username" field.
func (tu *TelecomUpdate) SetUsername(s string) *TelecomUpdate {
	tu.mutation.SetUsername(s)
	return tu
}

// SetPlatform sets the "platform" field.
func (tu *TelecomUpdate) SetPlatform(s string) *TelecomUpdate {
	tu.mutation.SetPlatform(s)
	return tu
}

// SetWhoIsTheOwnerOfThisTelecomID sets the "who_is_the_owner_of_this_telecom" edge to the User entity by ID.
func (tu *TelecomUpdate) SetWhoIsTheOwnerOfThisTelecomID(id int) *TelecomUpdate {
	tu.mutation.SetWhoIsTheOwnerOfThisTelecomID(id)
	return tu
}

// SetNillableWhoIsTheOwnerOfThisTelecomID sets the "who_is_the_owner_of_this_telecom" edge to the User entity by ID if the given value is not nil.
func (tu *TelecomUpdate) SetNillableWhoIsTheOwnerOfThisTelecomID(id *int) *TelecomUpdate {
	if id != nil {
		tu = tu.SetWhoIsTheOwnerOfThisTelecomID(*id)
	}
	return tu
}

// SetWhoIsTheOwnerOfThisTelecom sets the "who_is_the_owner_of_this_telecom" edge to the User entity.
func (tu *TelecomUpdate) SetWhoIsTheOwnerOfThisTelecom(u *User) *TelecomUpdate {
	return tu.SetWhoIsTheOwnerOfThisTelecomID(u.ID)
}

// Mutation returns the TelecomMutation object of the builder.
func (tu *TelecomUpdate) Mutation() *TelecomMutation {
	return tu.mutation
}

// ClearWhoIsTheOwnerOfThisTelecom clears the "who_is_the_owner_of_this_telecom" edge to the User entity.
func (tu *TelecomUpdate) ClearWhoIsTheOwnerOfThisTelecom() *TelecomUpdate {
	tu.mutation.ClearWhoIsTheOwnerOfThisTelecom()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TelecomUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TelecomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TelecomUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TelecomUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TelecomUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TelecomUpdate) check() error {
	if v, ok := tu.mutation.Username(); ok {
		if err := telecom.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf("ent: validator failed for field \"username\": %w", err)}
		}
	}
	if v, ok := tu.mutation.Platform(); ok {
		if err := telecom.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf("ent: validator failed for field \"platform\": %w", err)}
		}
	}
	return nil
}

func (tu *TelecomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   telecom.Table,
			Columns: telecom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: telecom.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: telecom.FieldUsername,
		})
	}
	if value, ok := tu.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: telecom.FieldPlatform,
		})
	}
	if tu.mutation.WhoIsTheOwnerOfThisTelecomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   telecom.WhoIsTheOwnerOfThisTelecomTable,
			Columns: []string{telecom.WhoIsTheOwnerOfThisTelecomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.WhoIsTheOwnerOfThisTelecomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   telecom.WhoIsTheOwnerOfThisTelecomTable,
			Columns: []string{telecom.WhoIsTheOwnerOfThisTelecomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telecom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TelecomUpdateOne is the builder for updating a single Telecom entity.
type TelecomUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TelecomMutation
}

// SetUsername sets the "username" field.
func (tuo *TelecomUpdateOne) SetUsername(s string) *TelecomUpdateOne {
	tuo.mutation.SetUsername(s)
	return tuo
}

// SetPlatform sets the "platform" field.
func (tuo *TelecomUpdateOne) SetPlatform(s string) *TelecomUpdateOne {
	tuo.mutation.SetPlatform(s)
	return tuo
}

// SetWhoIsTheOwnerOfThisTelecomID sets the "who_is_the_owner_of_this_telecom" edge to the User entity by ID.
func (tuo *TelecomUpdateOne) SetWhoIsTheOwnerOfThisTelecomID(id int) *TelecomUpdateOne {
	tuo.mutation.SetWhoIsTheOwnerOfThisTelecomID(id)
	return tuo
}

// SetNillableWhoIsTheOwnerOfThisTelecomID sets the "who_is_the_owner_of_this_telecom" edge to the User entity by ID if the given value is not nil.
func (tuo *TelecomUpdateOne) SetNillableWhoIsTheOwnerOfThisTelecomID(id *int) *TelecomUpdateOne {
	if id != nil {
		tuo = tuo.SetWhoIsTheOwnerOfThisTelecomID(*id)
	}
	return tuo
}

// SetWhoIsTheOwnerOfThisTelecom sets the "who_is_the_owner_of_this_telecom" edge to the User entity.
func (tuo *TelecomUpdateOne) SetWhoIsTheOwnerOfThisTelecom(u *User) *TelecomUpdateOne {
	return tuo.SetWhoIsTheOwnerOfThisTelecomID(u.ID)
}

// Mutation returns the TelecomMutation object of the builder.
func (tuo *TelecomUpdateOne) Mutation() *TelecomMutation {
	return tuo.mutation
}

// ClearWhoIsTheOwnerOfThisTelecom clears the "who_is_the_owner_of_this_telecom" edge to the User entity.
func (tuo *TelecomUpdateOne) ClearWhoIsTheOwnerOfThisTelecom() *TelecomUpdateOne {
	tuo.mutation.ClearWhoIsTheOwnerOfThisTelecom()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TelecomUpdateOne) Select(field string, fields ...string) *TelecomUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Telecom entity.
func (tuo *TelecomUpdateOne) Save(ctx context.Context) (*Telecom, error) {
	var (
		err  error
		node *Telecom
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TelecomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TelecomUpdateOne) SaveX(ctx context.Context) *Telecom {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TelecomUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TelecomUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TelecomUpdateOne) check() error {
	if v, ok := tuo.mutation.Username(); ok {
		if err := telecom.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf("ent: validator failed for field \"username\": %w", err)}
		}
	}
	if v, ok := tuo.mutation.Platform(); ok {
		if err := telecom.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf("ent: validator failed for field \"platform\": %w", err)}
		}
	}
	return nil
}

func (tuo *TelecomUpdateOne) sqlSave(ctx context.Context) (_node *Telecom, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   telecom.Table,
			Columns: telecom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: telecom.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Telecom.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telecom.FieldID)
		for _, f := range fields {
			if !telecom.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != telecom.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Username(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: telecom.FieldUsername,
		})
	}
	if value, ok := tuo.mutation.Platform(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: telecom.FieldPlatform,
		})
	}
	if tuo.mutation.WhoIsTheOwnerOfThisTelecomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   telecom.WhoIsTheOwnerOfThisTelecomTable,
			Columns: []string{telecom.WhoIsTheOwnerOfThisTelecomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.WhoIsTheOwnerOfThisTelecomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   telecom.WhoIsTheOwnerOfThisTelecomTable,
			Columns: []string{telecom.WhoIsTheOwnerOfThisTelecomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Telecom{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telecom.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
