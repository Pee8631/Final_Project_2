// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/treatment"
	"FinalProject/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Treatment is the model entity for the Treatment schema.
type Treatment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TreatmentRecord holds the value of the "treatmentRecord" field.
	TreatmentRecord string `json:"treatmentRecord,omitempty"`
	// DateTime holds the value of the "dateTime" field.
	DateTime time.Time `json:"dateTime,omitempty"`
	// TakeTime holds the value of the "takeTime" field.
	TakeTime float64 `json:"takeTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TreatmentQuery when eager-loading is set.
	Edges                        TreatmentEdges `json:"edges"`
	user_doctor_record_treatment *int
	user_user_have_treatment     *int
}

// TreatmentEdges holds the relations/edges for other nodes in the graph.
type TreatmentEdges struct {
	// TreatmentWasRecordedByDoctor holds the value of the treatment_was_recorded_by_doctor edge.
	TreatmentWasRecordedByDoctor *User `json:"treatment_was_recorded_by_doctor,omitempty"`
	// UserIsTheTreatmentOfRecord holds the value of the user_is_the_treatment_of_record edge.
	UserIsTheTreatmentOfRecord *User `json:"user_is_the_treatment_of_record,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TreatmentWasRecordedByDoctorOrErr returns the TreatmentWasRecordedByDoctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreatmentEdges) TreatmentWasRecordedByDoctorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.TreatmentWasRecordedByDoctor == nil {
			// The edge treatment_was_recorded_by_doctor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.TreatmentWasRecordedByDoctor, nil
	}
	return nil, &NotLoadedError{edge: "treatment_was_recorded_by_doctor"}
}

// UserIsTheTreatmentOfRecordOrErr returns the UserIsTheTreatmentOfRecord value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreatmentEdges) UserIsTheTreatmentOfRecordOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.UserIsTheTreatmentOfRecord == nil {
			// The edge user_is_the_treatment_of_record was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserIsTheTreatmentOfRecord, nil
	}
	return nil, &NotLoadedError{edge: "user_is_the_treatment_of_record"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Treatment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case treatment.FieldTakeTime:
			values[i] = new(sql.NullFloat64)
		case treatment.FieldID:
			values[i] = new(sql.NullInt64)
		case treatment.FieldTreatmentRecord:
			values[i] = new(sql.NullString)
		case treatment.FieldDateTime:
			values[i] = new(sql.NullTime)
		case treatment.ForeignKeys[0]: // user_doctor_record_treatment
			values[i] = new(sql.NullInt64)
		case treatment.ForeignKeys[1]: // user_user_have_treatment
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Treatment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Treatment fields.
func (t *Treatment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case treatment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case treatment.FieldTreatmentRecord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field treatmentRecord", values[i])
			} else if value.Valid {
				t.TreatmentRecord = value.String
			}
		case treatment.FieldDateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateTime", values[i])
			} else if value.Valid {
				t.DateTime = value.Time
			}
		case treatment.FieldTakeTime:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field takeTime", values[i])
			} else if value.Valid {
				t.TakeTime = value.Float64
			}
		case treatment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_doctor_record_treatment", value)
			} else if value.Valid {
				t.user_doctor_record_treatment = new(int)
				*t.user_doctor_record_treatment = int(value.Int64)
			}
		case treatment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_user_have_treatment", value)
			} else if value.Valid {
				t.user_user_have_treatment = new(int)
				*t.user_user_have_treatment = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTreatmentWasRecordedByDoctor queries the "treatment_was_recorded_by_doctor" edge of the Treatment entity.
func (t *Treatment) QueryTreatmentWasRecordedByDoctor() *UserQuery {
	return (&TreatmentClient{config: t.config}).QueryTreatmentWasRecordedByDoctor(t)
}

// QueryUserIsTheTreatmentOfRecord queries the "user_is_the_treatment_of_record" edge of the Treatment entity.
func (t *Treatment) QueryUserIsTheTreatmentOfRecord() *UserQuery {
	return (&TreatmentClient{config: t.config}).QueryUserIsTheTreatmentOfRecord(t)
}

// Update returns a builder for updating this Treatment.
// Note that you need to call Treatment.Unwrap() before calling this method if this Treatment
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Treatment) Update() *TreatmentUpdateOne {
	return (&TreatmentClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Treatment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Treatment) Unwrap() *Treatment {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Treatment is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Treatment) String() string {
	var builder strings.Builder
	builder.WriteString("Treatment(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", treatmentRecord=")
	builder.WriteString(t.TreatmentRecord)
	builder.WriteString(", dateTime=")
	builder.WriteString(t.DateTime.Format(time.ANSIC))
	builder.WriteString(", takeTime=")
	builder.WriteString(fmt.Sprintf("%v", t.TakeTime))
	builder.WriteByte(')')
	return builder.String()
}

// Treatments is a parsable slice of Treatment.
type Treatments []*Treatment

func (t Treatments) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
