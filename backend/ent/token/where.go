// Code generated by entc, DO NOT EDIT.

package token

import (
	"FinalProject/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AuthToken applies equality check predicate on the "AuthToken" field. It's identical to AuthTokenEQ.
func AuthToken(v string) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthToken), v))
	})
}

// GeneratedAt applies equality check predicate on the "GeneratedAt" field. It's identical to GeneratedAtEQ.
func GeneratedAt(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGeneratedAt), v))
	})
}

// ExpiresAt applies equality check predicate on the "ExpiresAt" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiresAt), v))
	})
}

// AuthTokenEQ applies the EQ predicate on the "AuthToken" field.
func AuthTokenEQ(v string) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthToken), v))
	})
}

// AuthTokenNEQ applies the NEQ predicate on the "AuthToken" field.
func AuthTokenNEQ(v string) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthToken), v))
	})
}

// AuthTokenIn applies the In predicate on the "AuthToken" field.
func AuthTokenIn(vs ...string) predicate.Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAuthToken), v...))
	})
}

// AuthTokenNotIn applies the NotIn predicate on the "AuthToken" field.
func AuthTokenNotIn(vs ...string) predicate.Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAuthToken), v...))
	})
}

// AuthTokenGT applies the GT predicate on the "AuthToken" field.
func AuthTokenGT(v string) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAuthToken), v))
	})
}

// AuthTokenGTE applies the GTE predicate on the "AuthToken" field.
func AuthTokenGTE(v string) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAuthToken), v))
	})
}

// AuthTokenLT applies the LT predicate on the "AuthToken" field.
func AuthTokenLT(v string) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAuthToken), v))
	})
}

// AuthTokenLTE applies the LTE predicate on the "AuthToken" field.
func AuthTokenLTE(v string) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAuthToken), v))
	})
}

// AuthTokenContains applies the Contains predicate on the "AuthToken" field.
func AuthTokenContains(v string) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAuthToken), v))
	})
}

// AuthTokenHasPrefix applies the HasPrefix predicate on the "AuthToken" field.
func AuthTokenHasPrefix(v string) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAuthToken), v))
	})
}

// AuthTokenHasSuffix applies the HasSuffix predicate on the "AuthToken" field.
func AuthTokenHasSuffix(v string) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAuthToken), v))
	})
}

// AuthTokenEqualFold applies the EqualFold predicate on the "AuthToken" field.
func AuthTokenEqualFold(v string) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAuthToken), v))
	})
}

// AuthTokenContainsFold applies the ContainsFold predicate on the "AuthToken" field.
func AuthTokenContainsFold(v string) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAuthToken), v))
	})
}

// GeneratedAtEQ applies the EQ predicate on the "GeneratedAt" field.
func GeneratedAtEQ(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGeneratedAt), v))
	})
}

// GeneratedAtNEQ applies the NEQ predicate on the "GeneratedAt" field.
func GeneratedAtNEQ(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGeneratedAt), v))
	})
}

// GeneratedAtIn applies the In predicate on the "GeneratedAt" field.
func GeneratedAtIn(vs ...time.Time) predicate.Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGeneratedAt), v...))
	})
}

// GeneratedAtNotIn applies the NotIn predicate on the "GeneratedAt" field.
func GeneratedAtNotIn(vs ...time.Time) predicate.Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGeneratedAt), v...))
	})
}

// GeneratedAtGT applies the GT predicate on the "GeneratedAt" field.
func GeneratedAtGT(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGeneratedAt), v))
	})
}

// GeneratedAtGTE applies the GTE predicate on the "GeneratedAt" field.
func GeneratedAtGTE(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGeneratedAt), v))
	})
}

// GeneratedAtLT applies the LT predicate on the "GeneratedAt" field.
func GeneratedAtLT(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGeneratedAt), v))
	})
}

// GeneratedAtLTE applies the LTE predicate on the "GeneratedAt" field.
func GeneratedAtLTE(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGeneratedAt), v))
	})
}

// GeneratedAtIsNil applies the IsNil predicate on the "GeneratedAt" field.
func GeneratedAtIsNil() predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGeneratedAt)))
	})
}

// GeneratedAtNotNil applies the NotNil predicate on the "GeneratedAt" field.
func GeneratedAtNotNil() predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGeneratedAt)))
	})
}

// ExpiresAtEQ applies the EQ predicate on the "ExpiresAt" field.
func ExpiresAtEQ(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiresAt), v))
	})
}

// ExpiresAtNEQ applies the NEQ predicate on the "ExpiresAt" field.
func ExpiresAtNEQ(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiresAt), v))
	})
}

// ExpiresAtIn applies the In predicate on the "ExpiresAt" field.
func ExpiresAtIn(vs ...time.Time) predicate.Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiresAt), v...))
	})
}

// ExpiresAtNotIn applies the NotIn predicate on the "ExpiresAt" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Token {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Token(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiresAt), v...))
	})
}

// ExpiresAtGT applies the GT predicate on the "ExpiresAt" field.
func ExpiresAtGT(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiresAt), v))
	})
}

// ExpiresAtGTE applies the GTE predicate on the "ExpiresAt" field.
func ExpiresAtGTE(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiresAt), v))
	})
}

// ExpiresAtLT applies the LT predicate on the "ExpiresAt" field.
func ExpiresAtLT(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiresAt), v))
	})
}

// ExpiresAtLTE applies the LTE predicate on the "ExpiresAt" field.
func ExpiresAtLTE(v time.Time) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiresAt), v))
	})
}

// ExpiresAtIsNil applies the IsNil predicate on the "ExpiresAt" field.
func ExpiresAtIsNil() predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldExpiresAt)))
	})
}

// ExpiresAtNotNil applies the NotNil predicate on the "ExpiresAt" field.
func ExpiresAtNotNil() predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldExpiresAt)))
	})
}

// HasAuthenticationToken applies the HasEdge predicate on the "authentication_token" edge.
func HasAuthenticationToken() predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AuthenticationTokenTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthenticationTokenTable, AuthenticationTokenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthenticationTokenWith applies the HasEdge predicate on the "authentication_token" edge with a given conditions (other predicates).
func HasAuthenticationTokenWith(preds ...predicate.User) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AuthenticationTokenInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthenticationTokenTable, AuthenticationTokenColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Token) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Token) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Token) predicate.Token {
	return predicate.Token(func(s *sql.Selector) {
		p(s.Not())
	})
}
