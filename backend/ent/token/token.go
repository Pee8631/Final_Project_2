// Code generated by entc, DO NOT EDIT.

package token

const (
	// Label holds the string label denoting the token type in the database.
	Label = "token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAuthToken holds the string denoting the authtoken field in the database.
	FieldAuthToken = "auth_token"
	// FieldGeneratedAt holds the string denoting the generatedat field in the database.
	FieldGeneratedAt = "generated_at"
	// FieldExpiresAt holds the string denoting the expiresat field in the database.
	FieldExpiresAt = "expires_at"
	// EdgeAuthenticationToken holds the string denoting the authentication_token edge name in mutations.
	EdgeAuthenticationToken = "authentication_token"
	// Table holds the table name of the token in the database.
	Table = "tokens"
	// AuthenticationTokenTable is the table that holds the authentication_token relation/edge.
	AuthenticationTokenTable = "tokens"
	// AuthenticationTokenInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthenticationTokenInverseTable = "users"
	// AuthenticationTokenColumn is the table column denoting the authentication_token relation/edge.
	AuthenticationTokenColumn = "user_user_have_token"
)

// Columns holds all SQL columns for token fields.
var Columns = []string{
	FieldID,
	FieldAuthToken,
	FieldGeneratedAt,
	FieldExpiresAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tokens"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_user_have_token",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
