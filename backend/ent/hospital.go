// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/hospital"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Hospital is the model entity for the Hospital schema.
type Hospital struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HospitalQuery when eager-loading is set.
	Edges HospitalEdges `json:"edges"`
}

// HospitalEdges holds the relations/edges for other nodes in the graph.
type HospitalEdges struct {
	// HospitalHasDoctor holds the value of the hospital_has_doctor edge.
	HospitalHasDoctor []*User `json:"hospital_has_doctor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HospitalHasDoctorOrErr returns the HospitalHasDoctor value or an error if the edge
// was not loaded in eager-loading.
func (e HospitalEdges) HospitalHasDoctorOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.HospitalHasDoctor, nil
	}
	return nil, &NotLoadedError{edge: "hospital_has_doctor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Hospital) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case hospital.FieldID:
			values[i] = new(sql.NullInt64)
		case hospital.FieldName:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Hospital", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Hospital fields.
func (h *Hospital) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hospital.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			h.ID = int(value.Int64)
		case hospital.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				h.Name = value.String
			}
		}
	}
	return nil
}

// QueryHospitalHasDoctor queries the "hospital_has_doctor" edge of the Hospital entity.
func (h *Hospital) QueryHospitalHasDoctor() *UserQuery {
	return (&HospitalClient{config: h.config}).QueryHospitalHasDoctor(h)
}

// Update returns a builder for updating this Hospital.
// Note that you need to call Hospital.Unwrap() before calling this method if this Hospital
// was returned from a transaction, and the transaction was committed or rolled back.
func (h *Hospital) Update() *HospitalUpdateOne {
	return (&HospitalClient{config: h.config}).UpdateOne(h)
}

// Unwrap unwraps the Hospital entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (h *Hospital) Unwrap() *Hospital {
	tx, ok := h.config.driver.(*txDriver)
	if !ok {
		panic("ent: Hospital is not a transactional entity")
	}
	h.config.driver = tx.drv
	return h
}

// String implements the fmt.Stringer.
func (h *Hospital) String() string {
	var builder strings.Builder
	builder.WriteString("Hospital(")
	builder.WriteString(fmt.Sprintf("id=%v", h.ID))
	builder.WriteString(", name=")
	builder.WriteString(h.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Hospitals is a parsable slice of Hospital.
type Hospitals []*Hospital

func (h Hospitals) config(cfg config) {
	for _i := range h {
		h[_i].config = cfg
	}
}
