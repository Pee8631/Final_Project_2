// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/data"
	"FinalProject/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DataCreate is the builder for creating a Data entity.
type DataCreate struct {
	config
	mutation *DataMutation
	hooks    []Hook
}

// SetIdCardNumber sets the "idCardNumber" field.
func (dc *DataCreate) SetIdCardNumber(s string) *DataCreate {
	dc.mutation.SetIdCardNumber(s)
	return dc
}

// SetFirstName sets the "firstName" field.
func (dc *DataCreate) SetFirstName(s string) *DataCreate {
	dc.mutation.SetFirstName(s)
	return dc
}

// SetLastName sets the "lastName" field.
func (dc *DataCreate) SetLastName(s string) *DataCreate {
	dc.mutation.SetLastName(s)
	return dc
}

// SetGender sets the "gender" field.
func (dc *DataCreate) SetGender(i int) *DataCreate {
	dc.mutation.SetGender(i)
	return dc
}

// SetBrithDate sets the "brithDate" field.
func (dc *DataCreate) SetBrithDate(t time.Time) *DataCreate {
	dc.mutation.SetBrithDate(t)
	return dc
}

// SetBloodGroup sets the "bloodGroup" field.
func (dc *DataCreate) SetBloodGroup(s string) *DataCreate {
	dc.mutation.SetBloodGroup(s)
	return dc
}

// SetAddress sets the "address" field.
func (dc *DataCreate) SetAddress(s string) *DataCreate {
	dc.mutation.SetAddress(s)
	return dc
}

// SetWhoIsTheOwnerOfThisDataID sets the "who_is_the_owner_of_this_data" edge to the User entity by ID.
func (dc *DataCreate) SetWhoIsTheOwnerOfThisDataID(id int) *DataCreate {
	dc.mutation.SetWhoIsTheOwnerOfThisDataID(id)
	return dc
}

// SetNillableWhoIsTheOwnerOfThisDataID sets the "who_is_the_owner_of_this_data" edge to the User entity by ID if the given value is not nil.
func (dc *DataCreate) SetNillableWhoIsTheOwnerOfThisDataID(id *int) *DataCreate {
	if id != nil {
		dc = dc.SetWhoIsTheOwnerOfThisDataID(*id)
	}
	return dc
}

// SetWhoIsTheOwnerOfThisData sets the "who_is_the_owner_of_this_data" edge to the User entity.
func (dc *DataCreate) SetWhoIsTheOwnerOfThisData(u *User) *DataCreate {
	return dc.SetWhoIsTheOwnerOfThisDataID(u.ID)
}

// Mutation returns the DataMutation object of the builder.
func (dc *DataCreate) Mutation() *DataMutation {
	return dc.mutation
}

// Save creates the Data in the database.
func (dc *DataCreate) Save(ctx context.Context) (*Data, error) {
	var (
		err  error
		node *Data
	)
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			if node, err = dc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			if dc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DataCreate) SaveX(ctx context.Context) *Data {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DataCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DataCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DataCreate) check() error {
	if _, ok := dc.mutation.IdCardNumber(); !ok {
		return &ValidationError{Name: "idCardNumber", err: errors.New(`ent: missing required field "idCardNumber"`)}
	}
	if _, ok := dc.mutation.FirstName(); !ok {
		return &ValidationError{Name: "firstName", err: errors.New(`ent: missing required field "firstName"`)}
	}
	if _, ok := dc.mutation.LastName(); !ok {
		return &ValidationError{Name: "lastName", err: errors.New(`ent: missing required field "lastName"`)}
	}
	if _, ok := dc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "gender"`)}
	}
	if _, ok := dc.mutation.BrithDate(); !ok {
		return &ValidationError{Name: "brithDate", err: errors.New(`ent: missing required field "brithDate"`)}
	}
	if _, ok := dc.mutation.BloodGroup(); !ok {
		return &ValidationError{Name: "bloodGroup", err: errors.New(`ent: missing required field "bloodGroup"`)}
	}
	if _, ok := dc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "address"`)}
	}
	return nil
}

func (dc *DataCreate) sqlSave(ctx context.Context) (*Data, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (dc *DataCreate) createSpec() (*Data, *sqlgraph.CreateSpec) {
	var (
		_node = &Data{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: data.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: data.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.IdCardNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: data.FieldIdCardNumber,
		})
		_node.IdCardNumber = value
	}
	if value, ok := dc.mutation.FirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: data.FieldFirstName,
		})
		_node.FirstName = value
	}
	if value, ok := dc.mutation.LastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: data.FieldLastName,
		})
		_node.LastName = value
	}
	if value, ok := dc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: data.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := dc.mutation.BrithDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: data.FieldBrithDate,
		})
		_node.BrithDate = value
	}
	if value, ok := dc.mutation.BloodGroup(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: data.FieldBloodGroup,
		})
		_node.BloodGroup = value
	}
	if value, ok := dc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: data.FieldAddress,
		})
		_node.Address = value
	}
	if nodes := dc.mutation.WhoIsTheOwnerOfThisDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   data.WhoIsTheOwnerOfThisDataTable,
			Columns: []string{data.WhoIsTheOwnerOfThisDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_user_has_data = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DataCreateBulk is the builder for creating many Data entities in bulk.
type DataCreateBulk struct {
	config
	builders []*DataCreate
}

// Save creates the Data entities in the database.
func (dcb *DataCreateBulk) Save(ctx context.Context) ([]*Data, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Data, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DataCreateBulk) SaveX(ctx context.Context) []*Data {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DataCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DataCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
