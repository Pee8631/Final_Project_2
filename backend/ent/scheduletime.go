// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/schedule"
	"FinalProject/ent/scheduletime"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ScheduleTime is the model entity for the ScheduleTime schema.
type ScheduleTime struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartTime holds the value of the "startTime" field.
	StartTime time.Time `json:"startTime,omitempty"`
	// StopTime holds the value of the "stopTime" field.
	StopTime time.Time `json:"stopTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduleTimeQuery when eager-loading is set.
	Edges                  ScheduleTimeEdges `json:"edges"`
	schedule_time_schedule *int
}

// ScheduleTimeEdges holds the relations/edges for other nodes in the graph.
type ScheduleTimeEdges struct {
	// WhatTimeIsTheSchedule holds the value of the what_time_is_the_schedule edge.
	WhatTimeIsTheSchedule *Schedule `json:"what_time_is_the_schedule,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WhatTimeIsTheScheduleOrErr returns the WhatTimeIsTheSchedule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduleTimeEdges) WhatTimeIsTheScheduleOrErr() (*Schedule, error) {
	if e.loadedTypes[0] {
		if e.WhatTimeIsTheSchedule == nil {
			// The edge what_time_is_the_schedule was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: schedule.Label}
		}
		return e.WhatTimeIsTheSchedule, nil
	}
	return nil, &NotLoadedError{edge: "what_time_is_the_schedule"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScheduleTime) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case scheduletime.FieldID:
			values[i] = new(sql.NullInt64)
		case scheduletime.FieldStartTime, scheduletime.FieldStopTime:
			values[i] = new(sql.NullTime)
		case scheduletime.ForeignKeys[0]: // schedule_time_schedule
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ScheduleTime", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScheduleTime fields.
func (st *ScheduleTime) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scheduletime.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			st.ID = int(value.Int64)
		case scheduletime.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startTime", values[i])
			} else if value.Valid {
				st.StartTime = value.Time
			}
		case scheduletime.FieldStopTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field stopTime", values[i])
			} else if value.Valid {
				st.StopTime = value.Time
			}
		case scheduletime.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field schedule_time_schedule", value)
			} else if value.Valid {
				st.schedule_time_schedule = new(int)
				*st.schedule_time_schedule = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryWhatTimeIsTheSchedule queries the "what_time_is_the_schedule" edge of the ScheduleTime entity.
func (st *ScheduleTime) QueryWhatTimeIsTheSchedule() *ScheduleQuery {
	return (&ScheduleTimeClient{config: st.config}).QueryWhatTimeIsTheSchedule(st)
}

// Update returns a builder for updating this ScheduleTime.
// Note that you need to call ScheduleTime.Unwrap() before calling this method if this ScheduleTime
// was returned from a transaction, and the transaction was committed or rolled back.
func (st *ScheduleTime) Update() *ScheduleTimeUpdateOne {
	return (&ScheduleTimeClient{config: st.config}).UpdateOne(st)
}

// Unwrap unwraps the ScheduleTime entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (st *ScheduleTime) Unwrap() *ScheduleTime {
	tx, ok := st.config.driver.(*txDriver)
	if !ok {
		panic("ent: ScheduleTime is not a transactional entity")
	}
	st.config.driver = tx.drv
	return st
}

// String implements the fmt.Stringer.
func (st *ScheduleTime) String() string {
	var builder strings.Builder
	builder.WriteString("ScheduleTime(")
	builder.WriteString(fmt.Sprintf("id=%v", st.ID))
	builder.WriteString(", startTime=")
	builder.WriteString(st.StartTime.Format(time.ANSIC))
	builder.WriteString(", stopTime=")
	builder.WriteString(st.StopTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ScheduleTimes is a parsable slice of ScheduleTime.
type ScheduleTimes []*ScheduleTime

func (st ScheduleTimes) config(cfg config) {
	for _i := range st {
		st[_i].config = cfg
	}
}
