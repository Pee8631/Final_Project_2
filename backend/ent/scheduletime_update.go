// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/predicate"
	"FinalProject/ent/schedule"
	"FinalProject/ent/scheduletime"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScheduleTimeUpdate is the builder for updating ScheduleTime entities.
type ScheduleTimeUpdate struct {
	config
	hooks    []Hook
	mutation *ScheduleTimeMutation
}

// Where appends a list predicates to the ScheduleTimeUpdate builder.
func (stu *ScheduleTimeUpdate) Where(ps ...predicate.ScheduleTime) *ScheduleTimeUpdate {
	stu.mutation.Where(ps...)
	return stu
}

// SetStartTime sets the "startTime" field.
func (stu *ScheduleTimeUpdate) SetStartTime(t time.Time) *ScheduleTimeUpdate {
	stu.mutation.SetStartTime(t)
	return stu
}

// SetStopTime sets the "stopTime" field.
func (stu *ScheduleTimeUpdate) SetStopTime(t time.Time) *ScheduleTimeUpdate {
	stu.mutation.SetStopTime(t)
	return stu
}

// SetWhatTimeIsTheScheduleID sets the "what_time_is_the_schedule" edge to the Schedule entity by ID.
func (stu *ScheduleTimeUpdate) SetWhatTimeIsTheScheduleID(id int) *ScheduleTimeUpdate {
	stu.mutation.SetWhatTimeIsTheScheduleID(id)
	return stu
}

// SetNillableWhatTimeIsTheScheduleID sets the "what_time_is_the_schedule" edge to the Schedule entity by ID if the given value is not nil.
func (stu *ScheduleTimeUpdate) SetNillableWhatTimeIsTheScheduleID(id *int) *ScheduleTimeUpdate {
	if id != nil {
		stu = stu.SetWhatTimeIsTheScheduleID(*id)
	}
	return stu
}

// SetWhatTimeIsTheSchedule sets the "what_time_is_the_schedule" edge to the Schedule entity.
func (stu *ScheduleTimeUpdate) SetWhatTimeIsTheSchedule(s *Schedule) *ScheduleTimeUpdate {
	return stu.SetWhatTimeIsTheScheduleID(s.ID)
}

// Mutation returns the ScheduleTimeMutation object of the builder.
func (stu *ScheduleTimeUpdate) Mutation() *ScheduleTimeMutation {
	return stu.mutation
}

// ClearWhatTimeIsTheSchedule clears the "what_time_is_the_schedule" edge to the Schedule entity.
func (stu *ScheduleTimeUpdate) ClearWhatTimeIsTheSchedule() *ScheduleTimeUpdate {
	stu.mutation.ClearWhatTimeIsTheSchedule()
	return stu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (stu *ScheduleTimeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(stu.hooks) == 0 {
		affected, err = stu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScheduleTimeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stu.mutation = mutation
			affected, err = stu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(stu.hooks) - 1; i >= 0; i-- {
			if stu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (stu *ScheduleTimeUpdate) SaveX(ctx context.Context) int {
	affected, err := stu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (stu *ScheduleTimeUpdate) Exec(ctx context.Context) error {
	_, err := stu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stu *ScheduleTimeUpdate) ExecX(ctx context.Context) {
	if err := stu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stu *ScheduleTimeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scheduletime.Table,
			Columns: scheduletime.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scheduletime.FieldID,
			},
		},
	}
	if ps := stu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stu.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scheduletime.FieldStartTime,
		})
	}
	if value, ok := stu.mutation.StopTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scheduletime.FieldStopTime,
		})
	}
	if stu.mutation.WhatTimeIsTheScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduletime.WhatTimeIsTheScheduleTable,
			Columns: []string{scheduletime.WhatTimeIsTheScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stu.mutation.WhatTimeIsTheScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduletime.WhatTimeIsTheScheduleTable,
			Columns: []string{scheduletime.WhatTimeIsTheScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, stu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduletime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ScheduleTimeUpdateOne is the builder for updating a single ScheduleTime entity.
type ScheduleTimeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScheduleTimeMutation
}

// SetStartTime sets the "startTime" field.
func (stuo *ScheduleTimeUpdateOne) SetStartTime(t time.Time) *ScheduleTimeUpdateOne {
	stuo.mutation.SetStartTime(t)
	return stuo
}

// SetStopTime sets the "stopTime" field.
func (stuo *ScheduleTimeUpdateOne) SetStopTime(t time.Time) *ScheduleTimeUpdateOne {
	stuo.mutation.SetStopTime(t)
	return stuo
}

// SetWhatTimeIsTheScheduleID sets the "what_time_is_the_schedule" edge to the Schedule entity by ID.
func (stuo *ScheduleTimeUpdateOne) SetWhatTimeIsTheScheduleID(id int) *ScheduleTimeUpdateOne {
	stuo.mutation.SetWhatTimeIsTheScheduleID(id)
	return stuo
}

// SetNillableWhatTimeIsTheScheduleID sets the "what_time_is_the_schedule" edge to the Schedule entity by ID if the given value is not nil.
func (stuo *ScheduleTimeUpdateOne) SetNillableWhatTimeIsTheScheduleID(id *int) *ScheduleTimeUpdateOne {
	if id != nil {
		stuo = stuo.SetWhatTimeIsTheScheduleID(*id)
	}
	return stuo
}

// SetWhatTimeIsTheSchedule sets the "what_time_is_the_schedule" edge to the Schedule entity.
func (stuo *ScheduleTimeUpdateOne) SetWhatTimeIsTheSchedule(s *Schedule) *ScheduleTimeUpdateOne {
	return stuo.SetWhatTimeIsTheScheduleID(s.ID)
}

// Mutation returns the ScheduleTimeMutation object of the builder.
func (stuo *ScheduleTimeUpdateOne) Mutation() *ScheduleTimeMutation {
	return stuo.mutation
}

// ClearWhatTimeIsTheSchedule clears the "what_time_is_the_schedule" edge to the Schedule entity.
func (stuo *ScheduleTimeUpdateOne) ClearWhatTimeIsTheSchedule() *ScheduleTimeUpdateOne {
	stuo.mutation.ClearWhatTimeIsTheSchedule()
	return stuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (stuo *ScheduleTimeUpdateOne) Select(field string, fields ...string) *ScheduleTimeUpdateOne {
	stuo.fields = append([]string{field}, fields...)
	return stuo
}

// Save executes the query and returns the updated ScheduleTime entity.
func (stuo *ScheduleTimeUpdateOne) Save(ctx context.Context) (*ScheduleTime, error) {
	var (
		err  error
		node *ScheduleTime
	)
	if len(stuo.hooks) == 0 {
		node, err = stuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScheduleTimeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			stuo.mutation = mutation
			node, err = stuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(stuo.hooks) - 1; i >= 0; i-- {
			if stuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = stuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, stuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (stuo *ScheduleTimeUpdateOne) SaveX(ctx context.Context) *ScheduleTime {
	node, err := stuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (stuo *ScheduleTimeUpdateOne) Exec(ctx context.Context) error {
	_, err := stuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (stuo *ScheduleTimeUpdateOne) ExecX(ctx context.Context) {
	if err := stuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (stuo *ScheduleTimeUpdateOne) sqlSave(ctx context.Context) (_node *ScheduleTime, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scheduletime.Table,
			Columns: scheduletime.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scheduletime.FieldID,
			},
		},
	}
	id, ok := stuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ScheduleTime.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := stuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scheduletime.FieldID)
		for _, f := range fields {
			if !scheduletime.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scheduletime.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := stuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := stuo.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scheduletime.FieldStartTime,
		})
	}
	if value, ok := stuo.mutation.StopTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scheduletime.FieldStopTime,
		})
	}
	if stuo.mutation.WhatTimeIsTheScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduletime.WhatTimeIsTheScheduleTable,
			Columns: []string{scheduletime.WhatTimeIsTheScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := stuo.mutation.WhatTimeIsTheScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduletime.WhatTimeIsTheScheduleTable,
			Columns: []string{scheduletime.WhatTimeIsTheScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScheduleTime{config: stuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, stuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduletime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
