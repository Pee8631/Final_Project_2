// Code generated by entc, DO NOT EDIT.

package schedule

import (
	"FinalProject/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Activity applies equality check predicate on the "activity" field. It's identical to ActivityEQ.
func Activity(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivity), v))
	})
}

// Detail applies equality check predicate on the "detail" field. It's identical to DetailEQ.
func Detail(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// ActivityEQ applies the EQ predicate on the "activity" field.
func ActivityEQ(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActivity), v))
	})
}

// ActivityNEQ applies the NEQ predicate on the "activity" field.
func ActivityNEQ(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActivity), v))
	})
}

// ActivityIn applies the In predicate on the "activity" field.
func ActivityIn(vs ...string) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActivity), v...))
	})
}

// ActivityNotIn applies the NotIn predicate on the "activity" field.
func ActivityNotIn(vs ...string) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActivity), v...))
	})
}

// ActivityGT applies the GT predicate on the "activity" field.
func ActivityGT(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActivity), v))
	})
}

// ActivityGTE applies the GTE predicate on the "activity" field.
func ActivityGTE(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActivity), v))
	})
}

// ActivityLT applies the LT predicate on the "activity" field.
func ActivityLT(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActivity), v))
	})
}

// ActivityLTE applies the LTE predicate on the "activity" field.
func ActivityLTE(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActivity), v))
	})
}

// ActivityContains applies the Contains predicate on the "activity" field.
func ActivityContains(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldActivity), v))
	})
}

// ActivityHasPrefix applies the HasPrefix predicate on the "activity" field.
func ActivityHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldActivity), v))
	})
}

// ActivityHasSuffix applies the HasSuffix predicate on the "activity" field.
func ActivityHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldActivity), v))
	})
}

// ActivityEqualFold applies the EqualFold predicate on the "activity" field.
func ActivityEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldActivity), v))
	})
}

// ActivityContainsFold applies the ContainsFold predicate on the "activity" field.
func ActivityContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldActivity), v))
	})
}

// DetailEQ applies the EQ predicate on the "detail" field.
func DetailEQ(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDetail), v))
	})
}

// DetailNEQ applies the NEQ predicate on the "detail" field.
func DetailNEQ(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDetail), v))
	})
}

// DetailIn applies the In predicate on the "detail" field.
func DetailIn(vs ...string) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDetail), v...))
	})
}

// DetailNotIn applies the NotIn predicate on the "detail" field.
func DetailNotIn(vs ...string) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDetail), v...))
	})
}

// DetailGT applies the GT predicate on the "detail" field.
func DetailGT(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDetail), v))
	})
}

// DetailGTE applies the GTE predicate on the "detail" field.
func DetailGTE(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDetail), v))
	})
}

// DetailLT applies the LT predicate on the "detail" field.
func DetailLT(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDetail), v))
	})
}

// DetailLTE applies the LTE predicate on the "detail" field.
func DetailLTE(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDetail), v))
	})
}

// DetailContains applies the Contains predicate on the "detail" field.
func DetailContains(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDetail), v))
	})
}

// DetailHasPrefix applies the HasPrefix predicate on the "detail" field.
func DetailHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDetail), v))
	})
}

// DetailHasSuffix applies the HasSuffix predicate on the "detail" field.
func DetailHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDetail), v))
	})
}

// DetailEqualFold applies the EqualFold predicate on the "detail" field.
func DetailEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDetail), v))
	})
}

// DetailContainsFold applies the ContainsFold predicate on the "detail" field.
func DetailContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDetail), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Schedule {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Schedule(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// HasTimeSchedule applies the HasEdge predicate on the "time_schedule" edge.
func HasTimeSchedule() predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TimeScheduleTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TimeScheduleTable, TimeScheduleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTimeScheduleWith applies the HasEdge predicate on the "time_schedule" edge with a given conditions (other predicates).
func HasTimeScheduleWith(preds ...predicate.ScheduleTime) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TimeScheduleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TimeScheduleTable, TimeScheduleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWhoIsTheOwnerOfThisSchedule applies the HasEdge predicate on the "who_is_the_owner_of_this_schedule" edge.
func HasWhoIsTheOwnerOfThisSchedule() predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WhoIsTheOwnerOfThisScheduleTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WhoIsTheOwnerOfThisScheduleTable, WhoIsTheOwnerOfThisScheduleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWhoIsTheOwnerOfThisScheduleWith applies the HasEdge predicate on the "who_is_the_owner_of_this_schedule" edge with a given conditions (other predicates).
func HasWhoIsTheOwnerOfThisScheduleWith(preds ...predicate.User) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WhoIsTheOwnerOfThisScheduleInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WhoIsTheOwnerOfThisScheduleTable, WhoIsTheOwnerOfThisScheduleColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Schedule) predicate.Schedule {
	return predicate.Schedule(func(s *sql.Selector) {
		p(s.Not())
	})
}
