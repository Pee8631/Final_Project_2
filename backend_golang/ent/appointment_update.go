// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/appointment"
	"FinalProject/ent/chat"
	"FinalProject/ent/predicate"
	"FinalProject/ent/schedule"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppointmentUpdate is the builder for updating Appointment entities.
type AppointmentUpdate struct {
	config
	hooks    []Hook
	mutation *AppointmentMutation
}

// Where appends a list predicates to the AppointmentUpdate builder.
func (au *AppointmentUpdate) Where(ps ...predicate.Appointment) *AppointmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetReasonForAppointment sets the "reasonForAppointment" field.
func (au *AppointmentUpdate) SetReasonForAppointment(s string) *AppointmentUpdate {
	au.mutation.SetReasonForAppointment(s)
	return au
}

// SetDetail sets the "detail" field.
func (au *AppointmentUpdate) SetDetail(s string) *AppointmentUpdate {
	au.mutation.SetDetail(s)
	return au
}

// SetStartTime sets the "startTime" field.
func (au *AppointmentUpdate) SetStartTime(t time.Time) *AppointmentUpdate {
	au.mutation.SetStartTime(t)
	return au
}

// SetEndTime sets the "endTime" field.
func (au *AppointmentUpdate) SetEndTime(t time.Time) *AppointmentUpdate {
	au.mutation.SetEndTime(t)
	return au
}

// SetStatus sets the "status" field.
func (au *AppointmentUpdate) SetStatus(s string) *AppointmentUpdate {
	au.mutation.SetStatus(s)
	return au
}

// SetDoctorId sets the "DoctorId" field.
func (au *AppointmentUpdate) SetDoctorId(i int) *AppointmentUpdate {
	au.mutation.ResetDoctorId()
	au.mutation.SetDoctorId(i)
	return au
}

// AddDoctorId adds i to the "DoctorId" field.
func (au *AppointmentUpdate) AddDoctorId(i int) *AppointmentUpdate {
	au.mutation.AddDoctorId(i)
	return au
}

// SetUserId sets the "UserId" field.
func (au *AppointmentUpdate) SetUserId(i int) *AppointmentUpdate {
	au.mutation.ResetUserId()
	au.mutation.SetUserId(i)
	return au
}

// AddUserId adds i to the "UserId" field.
func (au *AppointmentUpdate) AddUserId(i int) *AppointmentUpdate {
	au.mutation.AddUserId(i)
	return au
}

// SetAppointmentScheduleID sets the "appointment_schedule" edge to the Schedule entity by ID.
func (au *AppointmentUpdate) SetAppointmentScheduleID(id int) *AppointmentUpdate {
	au.mutation.SetAppointmentScheduleID(id)
	return au
}

// SetNillableAppointmentScheduleID sets the "appointment_schedule" edge to the Schedule entity by ID if the given value is not nil.
func (au *AppointmentUpdate) SetNillableAppointmentScheduleID(id *int) *AppointmentUpdate {
	if id != nil {
		au = au.SetAppointmentScheduleID(*id)
	}
	return au
}

// SetAppointmentSchedule sets the "appointment_schedule" edge to the Schedule entity.
func (au *AppointmentUpdate) SetAppointmentSchedule(s *Schedule) *AppointmentUpdate {
	return au.SetAppointmentScheduleID(s.ID)
}

// SetAppointmentChatID sets the "appointment_chat" edge to the Chat entity by ID.
func (au *AppointmentUpdate) SetAppointmentChatID(id int) *AppointmentUpdate {
	au.mutation.SetAppointmentChatID(id)
	return au
}

// SetNillableAppointmentChatID sets the "appointment_chat" edge to the Chat entity by ID if the given value is not nil.
func (au *AppointmentUpdate) SetNillableAppointmentChatID(id *int) *AppointmentUpdate {
	if id != nil {
		au = au.SetAppointmentChatID(*id)
	}
	return au
}

// SetAppointmentChat sets the "appointment_chat" edge to the Chat entity.
func (au *AppointmentUpdate) SetAppointmentChat(c *Chat) *AppointmentUpdate {
	return au.SetAppointmentChatID(c.ID)
}

// Mutation returns the AppointmentMutation object of the builder.
func (au *AppointmentUpdate) Mutation() *AppointmentMutation {
	return au.mutation
}

// ClearAppointmentSchedule clears the "appointment_schedule" edge to the Schedule entity.
func (au *AppointmentUpdate) ClearAppointmentSchedule() *AppointmentUpdate {
	au.mutation.ClearAppointmentSchedule()
	return au
}

// ClearAppointmentChat clears the "appointment_chat" edge to the Chat entity.
func (au *AppointmentUpdate) ClearAppointmentChat() *AppointmentUpdate {
	au.mutation.ClearAppointmentChat()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AppointmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppointmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AppointmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AppointmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AppointmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AppointmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appointment.Table,
			Columns: appointment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appointment.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.ReasonForAppointment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appointment.FieldReasonForAppointment,
		})
	}
	if value, ok := au.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appointment.FieldDetail,
		})
	}
	if value, ok := au.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldStartTime,
		})
	}
	if value, ok := au.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldEndTime,
		})
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appointment.FieldStatus,
		})
	}
	if value, ok := au.mutation.DoctorId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointment.FieldDoctorId,
		})
	}
	if value, ok := au.mutation.AddedDoctorId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointment.FieldDoctorId,
		})
	}
	if value, ok := au.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointment.FieldUserId,
		})
	}
	if value, ok := au.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointment.FieldUserId,
		})
	}
	if au.mutation.AppointmentScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AppointmentScheduleTable,
			Columns: []string{appointment.AppointmentScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AppointmentScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AppointmentScheduleTable,
			Columns: []string{appointment.AppointmentScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AppointmentChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AppointmentChatTable,
			Columns: []string{appointment.AppointmentChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AppointmentChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AppointmentChatTable,
			Columns: []string{appointment.AppointmentChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppointmentUpdateOne is the builder for updating a single Appointment entity.
type AppointmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppointmentMutation
}

// SetReasonForAppointment sets the "reasonForAppointment" field.
func (auo *AppointmentUpdateOne) SetReasonForAppointment(s string) *AppointmentUpdateOne {
	auo.mutation.SetReasonForAppointment(s)
	return auo
}

// SetDetail sets the "detail" field.
func (auo *AppointmentUpdateOne) SetDetail(s string) *AppointmentUpdateOne {
	auo.mutation.SetDetail(s)
	return auo
}

// SetStartTime sets the "startTime" field.
func (auo *AppointmentUpdateOne) SetStartTime(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetStartTime(t)
	return auo
}

// SetEndTime sets the "endTime" field.
func (auo *AppointmentUpdateOne) SetEndTime(t time.Time) *AppointmentUpdateOne {
	auo.mutation.SetEndTime(t)
	return auo
}

// SetStatus sets the "status" field.
func (auo *AppointmentUpdateOne) SetStatus(s string) *AppointmentUpdateOne {
	auo.mutation.SetStatus(s)
	return auo
}

// SetDoctorId sets the "DoctorId" field.
func (auo *AppointmentUpdateOne) SetDoctorId(i int) *AppointmentUpdateOne {
	auo.mutation.ResetDoctorId()
	auo.mutation.SetDoctorId(i)
	return auo
}

// AddDoctorId adds i to the "DoctorId" field.
func (auo *AppointmentUpdateOne) AddDoctorId(i int) *AppointmentUpdateOne {
	auo.mutation.AddDoctorId(i)
	return auo
}

// SetUserId sets the "UserId" field.
func (auo *AppointmentUpdateOne) SetUserId(i int) *AppointmentUpdateOne {
	auo.mutation.ResetUserId()
	auo.mutation.SetUserId(i)
	return auo
}

// AddUserId adds i to the "UserId" field.
func (auo *AppointmentUpdateOne) AddUserId(i int) *AppointmentUpdateOne {
	auo.mutation.AddUserId(i)
	return auo
}

// SetAppointmentScheduleID sets the "appointment_schedule" edge to the Schedule entity by ID.
func (auo *AppointmentUpdateOne) SetAppointmentScheduleID(id int) *AppointmentUpdateOne {
	auo.mutation.SetAppointmentScheduleID(id)
	return auo
}

// SetNillableAppointmentScheduleID sets the "appointment_schedule" edge to the Schedule entity by ID if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableAppointmentScheduleID(id *int) *AppointmentUpdateOne {
	if id != nil {
		auo = auo.SetAppointmentScheduleID(*id)
	}
	return auo
}

// SetAppointmentSchedule sets the "appointment_schedule" edge to the Schedule entity.
func (auo *AppointmentUpdateOne) SetAppointmentSchedule(s *Schedule) *AppointmentUpdateOne {
	return auo.SetAppointmentScheduleID(s.ID)
}

// SetAppointmentChatID sets the "appointment_chat" edge to the Chat entity by ID.
func (auo *AppointmentUpdateOne) SetAppointmentChatID(id int) *AppointmentUpdateOne {
	auo.mutation.SetAppointmentChatID(id)
	return auo
}

// SetNillableAppointmentChatID sets the "appointment_chat" edge to the Chat entity by ID if the given value is not nil.
func (auo *AppointmentUpdateOne) SetNillableAppointmentChatID(id *int) *AppointmentUpdateOne {
	if id != nil {
		auo = auo.SetAppointmentChatID(*id)
	}
	return auo
}

// SetAppointmentChat sets the "appointment_chat" edge to the Chat entity.
func (auo *AppointmentUpdateOne) SetAppointmentChat(c *Chat) *AppointmentUpdateOne {
	return auo.SetAppointmentChatID(c.ID)
}

// Mutation returns the AppointmentMutation object of the builder.
func (auo *AppointmentUpdateOne) Mutation() *AppointmentMutation {
	return auo.mutation
}

// ClearAppointmentSchedule clears the "appointment_schedule" edge to the Schedule entity.
func (auo *AppointmentUpdateOne) ClearAppointmentSchedule() *AppointmentUpdateOne {
	auo.mutation.ClearAppointmentSchedule()
	return auo
}

// ClearAppointmentChat clears the "appointment_chat" edge to the Chat entity.
func (auo *AppointmentUpdateOne) ClearAppointmentChat() *AppointmentUpdateOne {
	auo.mutation.ClearAppointmentChat()
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AppointmentUpdateOne) Select(field string, fields ...string) *AppointmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Appointment entity.
func (auo *AppointmentUpdateOne) Save(ctx context.Context) (*Appointment, error) {
	var (
		err  error
		node *Appointment
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppointmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AppointmentUpdateOne) SaveX(ctx context.Context) *Appointment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AppointmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AppointmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AppointmentUpdateOne) sqlSave(ctx context.Context) (_node *Appointment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appointment.Table,
			Columns: appointment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appointment.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Appointment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appointment.FieldID)
		for _, f := range fields {
			if !appointment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appointment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.ReasonForAppointment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appointment.FieldReasonForAppointment,
		})
	}
	if value, ok := auo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appointment.FieldDetail,
		})
	}
	if value, ok := auo.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldStartTime,
		})
	}
	if value, ok := auo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldEndTime,
		})
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appointment.FieldStatus,
		})
	}
	if value, ok := auo.mutation.DoctorId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointment.FieldDoctorId,
		})
	}
	if value, ok := auo.mutation.AddedDoctorId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointment.FieldDoctorId,
		})
	}
	if value, ok := auo.mutation.UserId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointment.FieldUserId,
		})
	}
	if value, ok := auo.mutation.AddedUserId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointment.FieldUserId,
		})
	}
	if auo.mutation.AppointmentScheduleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AppointmentScheduleTable,
			Columns: []string{appointment.AppointmentScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AppointmentScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AppointmentScheduleTable,
			Columns: []string{appointment.AppointmentScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AppointmentChatCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AppointmentChatTable,
			Columns: []string{appointment.AppointmentChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AppointmentChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AppointmentChatTable,
			Columns: []string{appointment.AppointmentChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Appointment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
