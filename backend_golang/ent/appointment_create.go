// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/appointment"
	"FinalProject/ent/chat"
	"FinalProject/ent/schedule"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppointmentCreate is the builder for creating a Appointment entity.
type AppointmentCreate struct {
	config
	mutation *AppointmentMutation
	hooks    []Hook
}

// SetReasonForAppointment sets the "reasonForAppointment" field.
func (ac *AppointmentCreate) SetReasonForAppointment(s string) *AppointmentCreate {
	ac.mutation.SetReasonForAppointment(s)
	return ac
}

// SetDetail sets the "detail" field.
func (ac *AppointmentCreate) SetDetail(s string) *AppointmentCreate {
	ac.mutation.SetDetail(s)
	return ac
}

// SetStartTime sets the "startTime" field.
func (ac *AppointmentCreate) SetStartTime(t time.Time) *AppointmentCreate {
	ac.mutation.SetStartTime(t)
	return ac
}

// SetEndTime sets the "endTime" field.
func (ac *AppointmentCreate) SetEndTime(t time.Time) *AppointmentCreate {
	ac.mutation.SetEndTime(t)
	return ac
}

// SetStatus sets the "status" field.
func (ac *AppointmentCreate) SetStatus(s string) *AppointmentCreate {
	ac.mutation.SetStatus(s)
	return ac
}

// SetDoctorId sets the "DoctorId" field.
func (ac *AppointmentCreate) SetDoctorId(i int) *AppointmentCreate {
	ac.mutation.SetDoctorId(i)
	return ac
}

// SetUserId sets the "UserId" field.
func (ac *AppointmentCreate) SetUserId(i int) *AppointmentCreate {
	ac.mutation.SetUserId(i)
	return ac
}

// SetAppointmentScheduleID sets the "appointment_schedule" edge to the Schedule entity by ID.
func (ac *AppointmentCreate) SetAppointmentScheduleID(id int) *AppointmentCreate {
	ac.mutation.SetAppointmentScheduleID(id)
	return ac
}

// SetNillableAppointmentScheduleID sets the "appointment_schedule" edge to the Schedule entity by ID if the given value is not nil.
func (ac *AppointmentCreate) SetNillableAppointmentScheduleID(id *int) *AppointmentCreate {
	if id != nil {
		ac = ac.SetAppointmentScheduleID(*id)
	}
	return ac
}

// SetAppointmentSchedule sets the "appointment_schedule" edge to the Schedule entity.
func (ac *AppointmentCreate) SetAppointmentSchedule(s *Schedule) *AppointmentCreate {
	return ac.SetAppointmentScheduleID(s.ID)
}

// SetAppointmentChatID sets the "appointment_chat" edge to the Chat entity by ID.
func (ac *AppointmentCreate) SetAppointmentChatID(id int) *AppointmentCreate {
	ac.mutation.SetAppointmentChatID(id)
	return ac
}

// SetNillableAppointmentChatID sets the "appointment_chat" edge to the Chat entity by ID if the given value is not nil.
func (ac *AppointmentCreate) SetNillableAppointmentChatID(id *int) *AppointmentCreate {
	if id != nil {
		ac = ac.SetAppointmentChatID(*id)
	}
	return ac
}

// SetAppointmentChat sets the "appointment_chat" edge to the Chat entity.
func (ac *AppointmentCreate) SetAppointmentChat(c *Chat) *AppointmentCreate {
	return ac.SetAppointmentChatID(c.ID)
}

// Mutation returns the AppointmentMutation object of the builder.
func (ac *AppointmentCreate) Mutation() *AppointmentMutation {
	return ac.mutation
}

// Save creates the Appointment in the database.
func (ac *AppointmentCreate) Save(ctx context.Context) (*Appointment, error) {
	var (
		err  error
		node *Appointment
	)
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppointmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AppointmentCreate) SaveX(ctx context.Context) *Appointment {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AppointmentCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AppointmentCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AppointmentCreate) check() error {
	if _, ok := ac.mutation.ReasonForAppointment(); !ok {
		return &ValidationError{Name: "reasonForAppointment", err: errors.New(`ent: missing required field "Appointment.reasonForAppointment"`)}
	}
	if _, ok := ac.mutation.Detail(); !ok {
		return &ValidationError{Name: "detail", err: errors.New(`ent: missing required field "Appointment.detail"`)}
	}
	if _, ok := ac.mutation.StartTime(); !ok {
		return &ValidationError{Name: "startTime", err: errors.New(`ent: missing required field "Appointment.startTime"`)}
	}
	if _, ok := ac.mutation.EndTime(); !ok {
		return &ValidationError{Name: "endTime", err: errors.New(`ent: missing required field "Appointment.endTime"`)}
	}
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Appointment.status"`)}
	}
	if _, ok := ac.mutation.DoctorId(); !ok {
		return &ValidationError{Name: "DoctorId", err: errors.New(`ent: missing required field "Appointment.DoctorId"`)}
	}
	if _, ok := ac.mutation.UserId(); !ok {
		return &ValidationError{Name: "UserId", err: errors.New(`ent: missing required field "Appointment.UserId"`)}
	}
	return nil
}

func (ac *AppointmentCreate) sqlSave(ctx context.Context) (*Appointment, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ac *AppointmentCreate) createSpec() (*Appointment, *sqlgraph.CreateSpec) {
	var (
		_node = &Appointment{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appointment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appointment.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.ReasonForAppointment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appointment.FieldReasonForAppointment,
		})
		_node.ReasonForAppointment = value
	}
	if value, ok := ac.mutation.Detail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appointment.FieldDetail,
		})
		_node.Detail = value
	}
	if value, ok := ac.mutation.StartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldStartTime,
		})
		_node.StartTime = value
	}
	if value, ok := ac.mutation.EndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointment.FieldEndTime,
		})
		_node.EndTime = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appointment.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := ac.mutation.DoctorId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointment.FieldDoctorId,
		})
		_node.DoctorId = value
	}
	if value, ok := ac.mutation.UserId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointment.FieldUserId,
		})
		_node.UserId = value
	}
	if nodes := ac.mutation.AppointmentScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AppointmentScheduleTable,
			Columns: []string{appointment.AppointmentScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.schedule_schedule_appointment = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AppointmentChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointment.AppointmentChatTable,
			Columns: []string{appointment.AppointmentChatColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.chat_chat_appointment = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AppointmentCreateBulk is the builder for creating many Appointment entities in bulk.
type AppointmentCreateBulk struct {
	config
	builders []*AppointmentCreate
}

// Save creates the Appointment entities in the database.
func (acb *AppointmentCreateBulk) Save(ctx context.Context) ([]*Appointment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Appointment, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppointmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AppointmentCreateBulk) SaveX(ctx context.Context) []*Appointment {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AppointmentCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AppointmentCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
