// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/certification"
	"FinalProject/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CertificationCreate is the builder for creating a Certification entity.
type CertificationCreate struct {
	config
	mutation *CertificationMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (cc *CertificationCreate) SetCode(s string) *CertificationCreate {
	cc.mutation.SetCode(s)
	return cc
}

// SetDiloma sets the "diloma" field.
func (cc *CertificationCreate) SetDiloma(s string) *CertificationCreate {
	cc.mutation.SetDiloma(s)
	return cc
}

// SetDateOfIssuing sets the "dateOfIssuing" field.
func (cc *CertificationCreate) SetDateOfIssuing(t time.Time) *CertificationCreate {
	cc.mutation.SetDateOfIssuing(t)
	return cc
}

// SetNillableDateOfIssuing sets the "dateOfIssuing" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableDateOfIssuing(t *time.Time) *CertificationCreate {
	if t != nil {
		cc.SetDateOfIssuing(*t)
	}
	return cc
}

// SetDateOfExp sets the "dateOfExp" field.
func (cc *CertificationCreate) SetDateOfExp(t time.Time) *CertificationCreate {
	cc.mutation.SetDateOfExp(t)
	return cc
}

// SetNillableDateOfExp sets the "dateOfExp" field if the given value is not nil.
func (cc *CertificationCreate) SetNillableDateOfExp(t *time.Time) *CertificationCreate {
	if t != nil {
		cc.SetDateOfExp(*t)
	}
	return cc
}

// SetIssuer sets the "Issuer" field.
func (cc *CertificationCreate) SetIssuer(s string) *CertificationCreate {
	cc.mutation.SetIssuer(s)
	return cc
}

// SetDoctorOwnerID sets the "doctor_owner" edge to the User entity by ID.
func (cc *CertificationCreate) SetDoctorOwnerID(id int) *CertificationCreate {
	cc.mutation.SetDoctorOwnerID(id)
	return cc
}

// SetNillableDoctorOwnerID sets the "doctor_owner" edge to the User entity by ID if the given value is not nil.
func (cc *CertificationCreate) SetNillableDoctorOwnerID(id *int) *CertificationCreate {
	if id != nil {
		cc = cc.SetDoctorOwnerID(*id)
	}
	return cc
}

// SetDoctorOwner sets the "doctor_owner" edge to the User entity.
func (cc *CertificationCreate) SetDoctorOwner(u *User) *CertificationCreate {
	return cc.SetDoctorOwnerID(u.ID)
}

// Mutation returns the CertificationMutation object of the builder.
func (cc *CertificationCreate) Mutation() *CertificationMutation {
	return cc.mutation
}

// Save creates the Certification in the database.
func (cc *CertificationCreate) Save(ctx context.Context) (*Certification, error) {
	var (
		err  error
		node *Certification
	)
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CertificationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CertificationCreate) SaveX(ctx context.Context) *Certification {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CertificationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CertificationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CertificationCreate) check() error {
	if _, ok := cc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Certification.code"`)}
	}
	if v, ok := cc.mutation.Code(); ok {
		if err := certification.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Certification.code": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Diloma(); !ok {
		return &ValidationError{Name: "diloma", err: errors.New(`ent: missing required field "Certification.diloma"`)}
	}
	if v, ok := cc.mutation.Diloma(); ok {
		if err := certification.DilomaValidator(v); err != nil {
			return &ValidationError{Name: "diloma", err: fmt.Errorf(`ent: validator failed for field "Certification.diloma": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Issuer(); !ok {
		return &ValidationError{Name: "Issuer", err: errors.New(`ent: missing required field "Certification.Issuer"`)}
	}
	return nil
}

func (cc *CertificationCreate) sqlSave(ctx context.Context) (*Certification, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CertificationCreate) createSpec() (*Certification, *sqlgraph.CreateSpec) {
	var (
		_node = &Certification{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: certification.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: certification.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: certification.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := cc.mutation.Diloma(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: certification.FieldDiloma,
		})
		_node.Diloma = value
	}
	if value, ok := cc.mutation.DateOfIssuing(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: certification.FieldDateOfIssuing,
		})
		_node.DateOfIssuing = value
	}
	if value, ok := cc.mutation.DateOfExp(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: certification.FieldDateOfExp,
		})
		_node.DateOfExp = value
	}
	if value, ok := cc.mutation.Issuer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: certification.FieldIssuer,
		})
		_node.Issuer = value
	}
	if nodes := cc.mutation.DoctorOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   certification.DoctorOwnerTable,
			Columns: []string{certification.DoctorOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_doctor_has_certification = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CertificationCreateBulk is the builder for creating many Certification entities in bulk.
type CertificationCreateBulk struct {
	config
	builders []*CertificationCreate
}

// Save creates the Certification entities in the database.
func (ccb *CertificationCreateBulk) Save(ctx context.Context) ([]*Certification, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Certification, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CertificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CertificationCreateBulk) SaveX(ctx context.Context) []*Certification {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CertificationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CertificationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
