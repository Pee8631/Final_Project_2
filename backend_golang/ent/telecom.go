// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/telecom"
	"FinalProject/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Telecom is the model entity for the Telecom schema.
type Telecom struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Telephone holds the value of the "telephone" field.
	Telephone string `json:"telephone,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Platform holds the value of the "platform" field.
	Platform string `json:"platform,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TelecomQuery when eager-loading is set.
	Edges                   TelecomEdges `json:"edges"`
	user_user_have_telecoms *int
}

// TelecomEdges holds the relations/edges for other nodes in the graph.
type TelecomEdges struct {
	// WhoIsTheOwnerOfThisTelecom holds the value of the who_is_the_owner_of_this_telecom edge.
	WhoIsTheOwnerOfThisTelecom *User `json:"who_is_the_owner_of_this_telecom,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WhoIsTheOwnerOfThisTelecomOrErr returns the WhoIsTheOwnerOfThisTelecom value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TelecomEdges) WhoIsTheOwnerOfThisTelecomOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.WhoIsTheOwnerOfThisTelecom == nil {
			// The edge who_is_the_owner_of_this_telecom was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.WhoIsTheOwnerOfThisTelecom, nil
	}
	return nil, &NotLoadedError{edge: "who_is_the_owner_of_this_telecom"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Telecom) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case telecom.FieldID:
			values[i] = new(sql.NullInt64)
		case telecom.FieldEmail, telecom.FieldTelephone, telecom.FieldUsername, telecom.FieldPlatform:
			values[i] = new(sql.NullString)
		case telecom.ForeignKeys[0]: // user_user_have_telecoms
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Telecom", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Telecom fields.
func (t *Telecom) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case telecom.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case telecom.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				t.Email = value.String
			}
		case telecom.FieldTelephone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field telephone", values[i])
			} else if value.Valid {
				t.Telephone = value.String
			}
		case telecom.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				t.Username = value.String
			}
		case telecom.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				t.Platform = value.String
			}
		case telecom.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_user_have_telecoms", value)
			} else if value.Valid {
				t.user_user_have_telecoms = new(int)
				*t.user_user_have_telecoms = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryWhoIsTheOwnerOfThisTelecom queries the "who_is_the_owner_of_this_telecom" edge of the Telecom entity.
func (t *Telecom) QueryWhoIsTheOwnerOfThisTelecom() *UserQuery {
	return (&TelecomClient{config: t.config}).QueryWhoIsTheOwnerOfThisTelecom(t)
}

// Update returns a builder for updating this Telecom.
// Note that you need to call Telecom.Unwrap() before calling this method if this Telecom
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Telecom) Update() *TelecomUpdateOne {
	return (&TelecomClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Telecom entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Telecom) Unwrap() *Telecom {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Telecom is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Telecom) String() string {
	var builder strings.Builder
	builder.WriteString("Telecom(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", email=")
	builder.WriteString(t.Email)
	builder.WriteString(", telephone=")
	builder.WriteString(t.Telephone)
	builder.WriteString(", username=")
	builder.WriteString(t.Username)
	builder.WriteString(", platform=")
	builder.WriteString(t.Platform)
	builder.WriteByte(')')
	return builder.String()
}

// Telecoms is a parsable slice of Telecom.
type Telecoms []*Telecom

func (t Telecoms) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
