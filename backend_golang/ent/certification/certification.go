// Code generated by entc, DO NOT EDIT.

package certification

const (
	// Label holds the string label denoting the certification type in the database.
	Label = "certification"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldDiloma holds the string denoting the diloma field in the database.
	FieldDiloma = "diloma"
	// FieldDateOfIssuing holds the string denoting the dateofissuing field in the database.
	FieldDateOfIssuing = "date_of_issuing"
	// FieldDateOfExp holds the string denoting the dateofexp field in the database.
	FieldDateOfExp = "date_of_exp"
	// FieldIssuer holds the string denoting the issuer field in the database.
	FieldIssuer = "issuer"
	// EdgeDoctorOwner holds the string denoting the doctor_owner edge name in mutations.
	EdgeDoctorOwner = "doctor_owner"
	// Table holds the table name of the certification in the database.
	Table = "certifications"
	// DoctorOwnerTable is the table that holds the doctor_owner relation/edge.
	DoctorOwnerTable = "certifications"
	// DoctorOwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	DoctorOwnerInverseTable = "users"
	// DoctorOwnerColumn is the table column denoting the doctor_owner relation/edge.
	DoctorOwnerColumn = "user_doctor_has_certification"
)

// Columns holds all SQL columns for certification fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldDiloma,
	FieldDateOfIssuing,
	FieldDateOfExp,
	FieldIssuer,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "certifications"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_doctor_has_certification",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DilomaValidator is a validator for the "diloma" field. It is called by the builders before save.
	DilomaValidator func(string) error
)
