// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// EdgeDoctorHasCertification holds the string denoting the doctor_has_certification edge name in mutations.
	EdgeDoctorHasCertification = "doctor_has_certification"
	// EdgeUserHasPInfo holds the string denoting the user_has_pinfo edge name in mutations.
	EdgeUserHasPInfo = "user_has_PInfo"
	// EdgeDoctorSchedule holds the string denoting the doctor_schedule edge name in mutations.
	EdgeDoctorSchedule = "doctor_schedule"
	// EdgeUserHaveTelecoms holds the string denoting the user_have_telecoms edge name in mutations.
	EdgeUserHaveTelecoms = "user_have_telecoms"
	// EdgeDoctorRecordTreatment holds the string denoting the doctor_record_treatment edge name in mutations.
	EdgeDoctorRecordTreatment = "doctor_record_treatment"
	// EdgeUserHaveTreatment holds the string denoting the user_have_treatment edge name in mutations.
	EdgeUserHaveTreatment = "user_have_treatment"
	// EdgeUserHaveToken holds the string denoting the user_have_token edge name in mutations.
	EdgeUserHaveToken = "user_have_token"
	// EdgeUserSendMessage holds the string denoting the user_send_message edge name in mutations.
	EdgeUserSendMessage = "user_send_message"
	// EdgeUserSendNotification holds the string denoting the user_send_notification edge name in mutations.
	EdgeUserSendNotification = "user_send_notification"
	// EdgeHasDepartment holds the string denoting the has_department edge name in mutations.
	EdgeHasDepartment = "has_department"
	// EdgeFromHospital holds the string denoting the from_hospital edge name in mutations.
	EdgeFromHospital = "from_hospital"
	// EdgeUserHaveDisease holds the string denoting the user_have_disease edge name in mutations.
	EdgeUserHaveDisease = "user_have_disease"
	// EdgeUserHaveRole holds the string denoting the user_have_role edge name in mutations.
	EdgeUserHaveRole = "user_have_role"
	// EdgeWhoIsInThisChat holds the string denoting the who_is_in_this_chat edge name in mutations.
	EdgeWhoIsInThisChat = "who_is_in_this_chat"
	// Table holds the table name of the user in the database.
	Table = "users"
	// DoctorHasCertificationTable is the table that holds the doctor_has_certification relation/edge.
	DoctorHasCertificationTable = "certifications"
	// DoctorHasCertificationInverseTable is the table name for the Certification entity.
	// It exists in this package in order to avoid circular dependency with the "certification" package.
	DoctorHasCertificationInverseTable = "certifications"
	// DoctorHasCertificationColumn is the table column denoting the doctor_has_certification relation/edge.
	DoctorHasCertificationColumn = "user_doctor_has_certification"
	// UserHasPInfoTable is the table that holds the user_has_PInfo relation/edge.
	UserHasPInfoTable = "pinfos"
	// UserHasPInfoInverseTable is the table name for the PInfo entity.
	// It exists in this package in order to avoid circular dependency with the "pinfo" package.
	UserHasPInfoInverseTable = "pinfos"
	// UserHasPInfoColumn is the table column denoting the user_has_PInfo relation/edge.
	UserHasPInfoColumn = "user_user_has_p_info"
	// DoctorScheduleTable is the table that holds the doctor_schedule relation/edge.
	DoctorScheduleTable = "schedules"
	// DoctorScheduleInverseTable is the table name for the Schedule entity.
	// It exists in this package in order to avoid circular dependency with the "schedule" package.
	DoctorScheduleInverseTable = "schedules"
	// DoctorScheduleColumn is the table column denoting the doctor_schedule relation/edge.
	DoctorScheduleColumn = "user_doctor_schedule"
	// UserHaveTelecomsTable is the table that holds the user_have_telecoms relation/edge.
	UserHaveTelecomsTable = "telecoms"
	// UserHaveTelecomsInverseTable is the table name for the Telecom entity.
	// It exists in this package in order to avoid circular dependency with the "telecom" package.
	UserHaveTelecomsInverseTable = "telecoms"
	// UserHaveTelecomsColumn is the table column denoting the user_have_telecoms relation/edge.
	UserHaveTelecomsColumn = "user_user_have_telecoms"
	// DoctorRecordTreatmentTable is the table that holds the doctor_record_treatment relation/edge.
	DoctorRecordTreatmentTable = "treatments"
	// DoctorRecordTreatmentInverseTable is the table name for the Treatment entity.
	// It exists in this package in order to avoid circular dependency with the "treatment" package.
	DoctorRecordTreatmentInverseTable = "treatments"
	// DoctorRecordTreatmentColumn is the table column denoting the doctor_record_treatment relation/edge.
	DoctorRecordTreatmentColumn = "user_doctor_record_treatment"
	// UserHaveTreatmentTable is the table that holds the user_have_treatment relation/edge.
	UserHaveTreatmentTable = "treatments"
	// UserHaveTreatmentInverseTable is the table name for the Treatment entity.
	// It exists in this package in order to avoid circular dependency with the "treatment" package.
	UserHaveTreatmentInverseTable = "treatments"
	// UserHaveTreatmentColumn is the table column denoting the user_have_treatment relation/edge.
	UserHaveTreatmentColumn = "user_user_have_treatment"
	// UserHaveTokenTable is the table that holds the user_have_token relation/edge.
	UserHaveTokenTable = "tokens"
	// UserHaveTokenInverseTable is the table name for the Token entity.
	// It exists in this package in order to avoid circular dependency with the "token" package.
	UserHaveTokenInverseTable = "tokens"
	// UserHaveTokenColumn is the table column denoting the user_have_token relation/edge.
	UserHaveTokenColumn = "user_user_have_token"
	// UserSendMessageTable is the table that holds the user_send_message relation/edge.
	UserSendMessageTable = "messages"
	// UserSendMessageInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	UserSendMessageInverseTable = "messages"
	// UserSendMessageColumn is the table column denoting the user_send_message relation/edge.
	UserSendMessageColumn = "user_user_send_message"
	// UserSendNotificationTable is the table that holds the user_send_notification relation/edge. The primary key declared below.
	UserSendNotificationTable = "user_user_send_notification"
	// UserSendNotificationInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	UserSendNotificationInverseTable = "notifications"
	// HasDepartmentTable is the table that holds the has_department relation/edge.
	HasDepartmentTable = "users"
	// HasDepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	HasDepartmentInverseTable = "departments"
	// HasDepartmentColumn is the table column denoting the has_department relation/edge.
	HasDepartmentColumn = "department_department_has_doctor"
	// FromHospitalTable is the table that holds the from_hospital relation/edge.
	FromHospitalTable = "users"
	// FromHospitalInverseTable is the table name for the Hospital entity.
	// It exists in this package in order to avoid circular dependency with the "hospital" package.
	FromHospitalInverseTable = "hospitals"
	// FromHospitalColumn is the table column denoting the from_hospital relation/edge.
	FromHospitalColumn = "hospital_hospital_has_doctor"
	// UserHaveDiseaseTable is the table that holds the user_have_disease relation/edge. The primary key declared below.
	UserHaveDiseaseTable = "disease_disease_user"
	// UserHaveDiseaseInverseTable is the table name for the Disease entity.
	// It exists in this package in order to avoid circular dependency with the "disease" package.
	UserHaveDiseaseInverseTable = "diseases"
	// UserHaveRoleTable is the table that holds the user_have_role relation/edge. The primary key declared below.
	UserHaveRoleTable = "role_role_user"
	// UserHaveRoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	UserHaveRoleInverseTable = "roles"
	// WhoIsInThisChatTable is the table that holds the who_is_in_this_chat relation/edge. The primary key declared below.
	WhoIsInThisChatTable = "chat_chat_user"
	// WhoIsInThisChatInverseTable is the table name for the Chat entity.
	// It exists in this package in order to avoid circular dependency with the "chat" package.
	WhoIsInThisChatInverseTable = "chats"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPassword,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "users"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"department_department_has_doctor",
	"hospital_hospital_has_doctor",
}

var (
	// UserSendNotificationPrimaryKey and UserSendNotificationColumn2 are the table columns denoting the
	// primary key for the user_send_notification relation (M2M).
	UserSendNotificationPrimaryKey = []string{"user_id", "notification_id"}
	// UserHaveDiseasePrimaryKey and UserHaveDiseaseColumn2 are the table columns denoting the
	// primary key for the user_have_disease relation (M2M).
	UserHaveDiseasePrimaryKey = []string{"disease_id", "user_id"}
	// UserHaveRolePrimaryKey and UserHaveRoleColumn2 are the table columns denoting the
	// primary key for the user_have_role relation (M2M).
	UserHaveRolePrimaryKey = []string{"role_id", "user_id"}
	// WhoIsInThisChatPrimaryKey and WhoIsInThisChatColumn2 are the table columns denoting the
	// primary key for the who_is_in_this_chat relation (M2M).
	WhoIsInThisChatPrimaryKey = []string{"chat_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
)
