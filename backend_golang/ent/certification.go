// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/certification"
	"FinalProject/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Certification is the model entity for the Certification schema.
type Certification struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Diloma holds the value of the "diloma" field.
	Diloma string `json:"diloma,omitempty"`
	// DateOfIssuing holds the value of the "dateOfIssuing" field.
	DateOfIssuing time.Time `json:"dateOfIssuing,omitempty"`
	// DateOfExp holds the value of the "dateOfExp" field.
	DateOfExp time.Time `json:"dateOfExp,omitempty"`
	// Issuer holds the value of the "Issuer" field.
	Issuer string `json:"Issuer,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CertificationQuery when eager-loading is set.
	Edges                         CertificationEdges `json:"edges"`
	user_doctor_has_certification *int
}

// CertificationEdges holds the relations/edges for other nodes in the graph.
type CertificationEdges struct {
	// DoctorOwner holds the value of the doctor_owner edge.
	DoctorOwner *User `json:"doctor_owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DoctorOwnerOrErr returns the DoctorOwner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CertificationEdges) DoctorOwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.DoctorOwner == nil {
			// The edge doctor_owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.DoctorOwner, nil
	}
	return nil, &NotLoadedError{edge: "doctor_owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Certification) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case certification.FieldID:
			values[i] = new(sql.NullInt64)
		case certification.FieldCode, certification.FieldDiloma, certification.FieldIssuer:
			values[i] = new(sql.NullString)
		case certification.FieldDateOfIssuing, certification.FieldDateOfExp:
			values[i] = new(sql.NullTime)
		case certification.ForeignKeys[0]: // user_doctor_has_certification
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Certification", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Certification fields.
func (c *Certification) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case certification.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case certification.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				c.Code = value.String
			}
		case certification.FieldDiloma:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field diloma", values[i])
			} else if value.Valid {
				c.Diloma = value.String
			}
		case certification.FieldDateOfIssuing:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateOfIssuing", values[i])
			} else if value.Valid {
				c.DateOfIssuing = value.Time
			}
		case certification.FieldDateOfExp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateOfExp", values[i])
			} else if value.Valid {
				c.DateOfExp = value.Time
			}
		case certification.FieldIssuer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Issuer", values[i])
			} else if value.Valid {
				c.Issuer = value.String
			}
		case certification.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_doctor_has_certification", value)
			} else if value.Valid {
				c.user_doctor_has_certification = new(int)
				*c.user_doctor_has_certification = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDoctorOwner queries the "doctor_owner" edge of the Certification entity.
func (c *Certification) QueryDoctorOwner() *UserQuery {
	return (&CertificationClient{config: c.config}).QueryDoctorOwner(c)
}

// Update returns a builder for updating this Certification.
// Note that you need to call Certification.Unwrap() before calling this method if this Certification
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Certification) Update() *CertificationUpdateOne {
	return (&CertificationClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Certification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Certification) Unwrap() *Certification {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Certification is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Certification) String() string {
	var builder strings.Builder
	builder.WriteString("Certification(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", code=")
	builder.WriteString(c.Code)
	builder.WriteString(", diloma=")
	builder.WriteString(c.Diloma)
	builder.WriteString(", dateOfIssuing=")
	builder.WriteString(c.DateOfIssuing.Format(time.ANSIC))
	builder.WriteString(", dateOfExp=")
	builder.WriteString(c.DateOfExp.Format(time.ANSIC))
	builder.WriteString(", Issuer=")
	builder.WriteString(c.Issuer)
	builder.WriteByte(')')
	return builder.String()
}

// Certifications is a parsable slice of Certification.
type Certifications []*Certification

func (c Certifications) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
