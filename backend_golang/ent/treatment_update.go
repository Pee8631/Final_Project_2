// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/predicate"
	"FinalProject/ent/treatment"
	"FinalProject/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TreatmentUpdate is the builder for updating Treatment entities.
type TreatmentUpdate struct {
	config
	hooks    []Hook
	mutation *TreatmentMutation
}

// Where appends a list predicates to the TreatmentUpdate builder.
func (tu *TreatmentUpdate) Where(ps ...predicate.Treatment) *TreatmentUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetTreatmentRecord sets the "treatmentRecord" field.
func (tu *TreatmentUpdate) SetTreatmentRecord(s string) *TreatmentUpdate {
	tu.mutation.SetTreatmentRecord(s)
	return tu
}

// SetDateTime sets the "dateTime" field.
func (tu *TreatmentUpdate) SetDateTime(t time.Time) *TreatmentUpdate {
	tu.mutation.SetDateTime(t)
	return tu
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (tu *TreatmentUpdate) SetNillableDateTime(t *time.Time) *TreatmentUpdate {
	if t != nil {
		tu.SetDateTime(*t)
	}
	return tu
}

// ClearDateTime clears the value of the "dateTime" field.
func (tu *TreatmentUpdate) ClearDateTime() *TreatmentUpdate {
	tu.mutation.ClearDateTime()
	return tu
}

// SetTakeTime sets the "takeTime" field.
func (tu *TreatmentUpdate) SetTakeTime(f float64) *TreatmentUpdate {
	tu.mutation.ResetTakeTime()
	tu.mutation.SetTakeTime(f)
	return tu
}

// AddTakeTime adds f to the "takeTime" field.
func (tu *TreatmentUpdate) AddTakeTime(f float64) *TreatmentUpdate {
	tu.mutation.AddTakeTime(f)
	return tu
}

// SetTreatmentWasRecordedByDoctorID sets the "treatment_was_recorded_by_doctor" edge to the User entity by ID.
func (tu *TreatmentUpdate) SetTreatmentWasRecordedByDoctorID(id int) *TreatmentUpdate {
	tu.mutation.SetTreatmentWasRecordedByDoctorID(id)
	return tu
}

// SetNillableTreatmentWasRecordedByDoctorID sets the "treatment_was_recorded_by_doctor" edge to the User entity by ID if the given value is not nil.
func (tu *TreatmentUpdate) SetNillableTreatmentWasRecordedByDoctorID(id *int) *TreatmentUpdate {
	if id != nil {
		tu = tu.SetTreatmentWasRecordedByDoctorID(*id)
	}
	return tu
}

// SetTreatmentWasRecordedByDoctor sets the "treatment_was_recorded_by_doctor" edge to the User entity.
func (tu *TreatmentUpdate) SetTreatmentWasRecordedByDoctor(u *User) *TreatmentUpdate {
	return tu.SetTreatmentWasRecordedByDoctorID(u.ID)
}

// SetUserIsTheTreatmentOfRecordID sets the "user_is_the_treatment_of_record" edge to the User entity by ID.
func (tu *TreatmentUpdate) SetUserIsTheTreatmentOfRecordID(id int) *TreatmentUpdate {
	tu.mutation.SetUserIsTheTreatmentOfRecordID(id)
	return tu
}

// SetNillableUserIsTheTreatmentOfRecordID sets the "user_is_the_treatment_of_record" edge to the User entity by ID if the given value is not nil.
func (tu *TreatmentUpdate) SetNillableUserIsTheTreatmentOfRecordID(id *int) *TreatmentUpdate {
	if id != nil {
		tu = tu.SetUserIsTheTreatmentOfRecordID(*id)
	}
	return tu
}

// SetUserIsTheTreatmentOfRecord sets the "user_is_the_treatment_of_record" edge to the User entity.
func (tu *TreatmentUpdate) SetUserIsTheTreatmentOfRecord(u *User) *TreatmentUpdate {
	return tu.SetUserIsTheTreatmentOfRecordID(u.ID)
}

// Mutation returns the TreatmentMutation object of the builder.
func (tu *TreatmentUpdate) Mutation() *TreatmentMutation {
	return tu.mutation
}

// ClearTreatmentWasRecordedByDoctor clears the "treatment_was_recorded_by_doctor" edge to the User entity.
func (tu *TreatmentUpdate) ClearTreatmentWasRecordedByDoctor() *TreatmentUpdate {
	tu.mutation.ClearTreatmentWasRecordedByDoctor()
	return tu
}

// ClearUserIsTheTreatmentOfRecord clears the "user_is_the_treatment_of_record" edge to the User entity.
func (tu *TreatmentUpdate) ClearUserIsTheTreatmentOfRecord() *TreatmentUpdate {
	tu.mutation.ClearUserIsTheTreatmentOfRecord()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TreatmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TreatmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TreatmentUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TreatmentUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TreatmentUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TreatmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   treatment.Table,
			Columns: treatment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: treatment.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.TreatmentRecord(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: treatment.FieldTreatmentRecord,
		})
	}
	if value, ok := tu.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: treatment.FieldDateTime,
		})
	}
	if tu.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: treatment.FieldDateTime,
		})
	}
	if value, ok := tu.mutation.TakeTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: treatment.FieldTakeTime,
		})
	}
	if value, ok := tu.mutation.AddedTakeTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: treatment.FieldTakeTime,
		})
	}
	if tu.mutation.TreatmentWasRecordedByDoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.TreatmentWasRecordedByDoctorTable,
			Columns: []string{treatment.TreatmentWasRecordedByDoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TreatmentWasRecordedByDoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.TreatmentWasRecordedByDoctorTable,
			Columns: []string{treatment.TreatmentWasRecordedByDoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.UserIsTheTreatmentOfRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.UserIsTheTreatmentOfRecordTable,
			Columns: []string{treatment.UserIsTheTreatmentOfRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserIsTheTreatmentOfRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.UserIsTheTreatmentOfRecordTable,
			Columns: []string{treatment.UserIsTheTreatmentOfRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treatment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TreatmentUpdateOne is the builder for updating a single Treatment entity.
type TreatmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TreatmentMutation
}

// SetTreatmentRecord sets the "treatmentRecord" field.
func (tuo *TreatmentUpdateOne) SetTreatmentRecord(s string) *TreatmentUpdateOne {
	tuo.mutation.SetTreatmentRecord(s)
	return tuo
}

// SetDateTime sets the "dateTime" field.
func (tuo *TreatmentUpdateOne) SetDateTime(t time.Time) *TreatmentUpdateOne {
	tuo.mutation.SetDateTime(t)
	return tuo
}

// SetNillableDateTime sets the "dateTime" field if the given value is not nil.
func (tuo *TreatmentUpdateOne) SetNillableDateTime(t *time.Time) *TreatmentUpdateOne {
	if t != nil {
		tuo.SetDateTime(*t)
	}
	return tuo
}

// ClearDateTime clears the value of the "dateTime" field.
func (tuo *TreatmentUpdateOne) ClearDateTime() *TreatmentUpdateOne {
	tuo.mutation.ClearDateTime()
	return tuo
}

// SetTakeTime sets the "takeTime" field.
func (tuo *TreatmentUpdateOne) SetTakeTime(f float64) *TreatmentUpdateOne {
	tuo.mutation.ResetTakeTime()
	tuo.mutation.SetTakeTime(f)
	return tuo
}

// AddTakeTime adds f to the "takeTime" field.
func (tuo *TreatmentUpdateOne) AddTakeTime(f float64) *TreatmentUpdateOne {
	tuo.mutation.AddTakeTime(f)
	return tuo
}

// SetTreatmentWasRecordedByDoctorID sets the "treatment_was_recorded_by_doctor" edge to the User entity by ID.
func (tuo *TreatmentUpdateOne) SetTreatmentWasRecordedByDoctorID(id int) *TreatmentUpdateOne {
	tuo.mutation.SetTreatmentWasRecordedByDoctorID(id)
	return tuo
}

// SetNillableTreatmentWasRecordedByDoctorID sets the "treatment_was_recorded_by_doctor" edge to the User entity by ID if the given value is not nil.
func (tuo *TreatmentUpdateOne) SetNillableTreatmentWasRecordedByDoctorID(id *int) *TreatmentUpdateOne {
	if id != nil {
		tuo = tuo.SetTreatmentWasRecordedByDoctorID(*id)
	}
	return tuo
}

// SetTreatmentWasRecordedByDoctor sets the "treatment_was_recorded_by_doctor" edge to the User entity.
func (tuo *TreatmentUpdateOne) SetTreatmentWasRecordedByDoctor(u *User) *TreatmentUpdateOne {
	return tuo.SetTreatmentWasRecordedByDoctorID(u.ID)
}

// SetUserIsTheTreatmentOfRecordID sets the "user_is_the_treatment_of_record" edge to the User entity by ID.
func (tuo *TreatmentUpdateOne) SetUserIsTheTreatmentOfRecordID(id int) *TreatmentUpdateOne {
	tuo.mutation.SetUserIsTheTreatmentOfRecordID(id)
	return tuo
}

// SetNillableUserIsTheTreatmentOfRecordID sets the "user_is_the_treatment_of_record" edge to the User entity by ID if the given value is not nil.
func (tuo *TreatmentUpdateOne) SetNillableUserIsTheTreatmentOfRecordID(id *int) *TreatmentUpdateOne {
	if id != nil {
		tuo = tuo.SetUserIsTheTreatmentOfRecordID(*id)
	}
	return tuo
}

// SetUserIsTheTreatmentOfRecord sets the "user_is_the_treatment_of_record" edge to the User entity.
func (tuo *TreatmentUpdateOne) SetUserIsTheTreatmentOfRecord(u *User) *TreatmentUpdateOne {
	return tuo.SetUserIsTheTreatmentOfRecordID(u.ID)
}

// Mutation returns the TreatmentMutation object of the builder.
func (tuo *TreatmentUpdateOne) Mutation() *TreatmentMutation {
	return tuo.mutation
}

// ClearTreatmentWasRecordedByDoctor clears the "treatment_was_recorded_by_doctor" edge to the User entity.
func (tuo *TreatmentUpdateOne) ClearTreatmentWasRecordedByDoctor() *TreatmentUpdateOne {
	tuo.mutation.ClearTreatmentWasRecordedByDoctor()
	return tuo
}

// ClearUserIsTheTreatmentOfRecord clears the "user_is_the_treatment_of_record" edge to the User entity.
func (tuo *TreatmentUpdateOne) ClearUserIsTheTreatmentOfRecord() *TreatmentUpdateOne {
	tuo.mutation.ClearUserIsTheTreatmentOfRecord()
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TreatmentUpdateOne) Select(field string, fields ...string) *TreatmentUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Treatment entity.
func (tuo *TreatmentUpdateOne) Save(ctx context.Context) (*Treatment, error) {
	var (
		err  error
		node *Treatment
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TreatmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TreatmentUpdateOne) SaveX(ctx context.Context) *Treatment {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TreatmentUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TreatmentUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TreatmentUpdateOne) sqlSave(ctx context.Context) (_node *Treatment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   treatment.Table,
			Columns: treatment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: treatment.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Treatment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, treatment.FieldID)
		for _, f := range fields {
			if !treatment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != treatment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.TreatmentRecord(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: treatment.FieldTreatmentRecord,
		})
	}
	if value, ok := tuo.mutation.DateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: treatment.FieldDateTime,
		})
	}
	if tuo.mutation.DateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: treatment.FieldDateTime,
		})
	}
	if value, ok := tuo.mutation.TakeTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: treatment.FieldTakeTime,
		})
	}
	if value, ok := tuo.mutation.AddedTakeTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: treatment.FieldTakeTime,
		})
	}
	if tuo.mutation.TreatmentWasRecordedByDoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.TreatmentWasRecordedByDoctorTable,
			Columns: []string{treatment.TreatmentWasRecordedByDoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TreatmentWasRecordedByDoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.TreatmentWasRecordedByDoctorTable,
			Columns: []string{treatment.TreatmentWasRecordedByDoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.UserIsTheTreatmentOfRecordCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.UserIsTheTreatmentOfRecordTable,
			Columns: []string{treatment.UserIsTheTreatmentOfRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserIsTheTreatmentOfRecordIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   treatment.UserIsTheTreatmentOfRecordTable,
			Columns: []string{treatment.UserIsTheTreatmentOfRecordColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Treatment{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{treatment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
