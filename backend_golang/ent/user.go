// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/department"
	"FinalProject/ent/hospital"
	"FinalProject/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges                            UserEdges `json:"edges"`
	department_department_has_doctor *int
	hospital_hospital_has_doctor     *int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// DoctorHasCertification holds the value of the doctor_has_certification edge.
	DoctorHasCertification []*Certification `json:"doctor_has_certification,omitempty"`
	// UserHasPInfo holds the value of the user_has_PInfo edge.
	UserHasPInfo []*PInfo `json:"user_has_PInfo,omitempty"`
	// DoctorSchedule holds the value of the doctor_schedule edge.
	DoctorSchedule []*Schedule `json:"doctor_schedule,omitempty"`
	// UserHaveTelecoms holds the value of the user_have_telecoms edge.
	UserHaveTelecoms []*Telecom `json:"user_have_telecoms,omitempty"`
	// DoctorRecordTreatment holds the value of the doctor_record_treatment edge.
	DoctorRecordTreatment []*Treatment `json:"doctor_record_treatment,omitempty"`
	// UserHaveTreatment holds the value of the user_have_treatment edge.
	UserHaveTreatment []*Treatment `json:"user_have_treatment,omitempty"`
	// UserHaveToken holds the value of the user_have_token edge.
	UserHaveToken []*Token `json:"user_have_token,omitempty"`
	// UserSendMessage holds the value of the user_send_message edge.
	UserSendMessage []*Message `json:"user_send_message,omitempty"`
	// UserSendNotification holds the value of the user_send_notification edge.
	UserSendNotification []*Notification `json:"user_send_notification,omitempty"`
	// HasDepartment holds the value of the has_department edge.
	HasDepartment *Department `json:"has_department,omitempty"`
	// FromHospital holds the value of the from_hospital edge.
	FromHospital *Hospital `json:"from_hospital,omitempty"`
	// UserHaveDisease holds the value of the user_have_disease edge.
	UserHaveDisease []*Disease `json:"user_have_disease,omitempty"`
	// UserHaveRole holds the value of the user_have_role edge.
	UserHaveRole []*Role `json:"user_have_role,omitempty"`
	// WhoIsInThisChat holds the value of the who_is_in_this_chat edge.
	WhoIsInThisChat []*Chat `json:"who_is_in_this_chat,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [14]bool
}

// DoctorHasCertificationOrErr returns the DoctorHasCertification value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DoctorHasCertificationOrErr() ([]*Certification, error) {
	if e.loadedTypes[0] {
		return e.DoctorHasCertification, nil
	}
	return nil, &NotLoadedError{edge: "doctor_has_certification"}
}

// UserHasPInfoOrErr returns the UserHasPInfo value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserHasPInfoOrErr() ([]*PInfo, error) {
	if e.loadedTypes[1] {
		return e.UserHasPInfo, nil
	}
	return nil, &NotLoadedError{edge: "user_has_PInfo"}
}

// DoctorScheduleOrErr returns the DoctorSchedule value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DoctorScheduleOrErr() ([]*Schedule, error) {
	if e.loadedTypes[2] {
		return e.DoctorSchedule, nil
	}
	return nil, &NotLoadedError{edge: "doctor_schedule"}
}

// UserHaveTelecomsOrErr returns the UserHaveTelecoms value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserHaveTelecomsOrErr() ([]*Telecom, error) {
	if e.loadedTypes[3] {
		return e.UserHaveTelecoms, nil
	}
	return nil, &NotLoadedError{edge: "user_have_telecoms"}
}

// DoctorRecordTreatmentOrErr returns the DoctorRecordTreatment value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DoctorRecordTreatmentOrErr() ([]*Treatment, error) {
	if e.loadedTypes[4] {
		return e.DoctorRecordTreatment, nil
	}
	return nil, &NotLoadedError{edge: "doctor_record_treatment"}
}

// UserHaveTreatmentOrErr returns the UserHaveTreatment value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserHaveTreatmentOrErr() ([]*Treatment, error) {
	if e.loadedTypes[5] {
		return e.UserHaveTreatment, nil
	}
	return nil, &NotLoadedError{edge: "user_have_treatment"}
}

// UserHaveTokenOrErr returns the UserHaveToken value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserHaveTokenOrErr() ([]*Token, error) {
	if e.loadedTypes[6] {
		return e.UserHaveToken, nil
	}
	return nil, &NotLoadedError{edge: "user_have_token"}
}

// UserSendMessageOrErr returns the UserSendMessage value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserSendMessageOrErr() ([]*Message, error) {
	if e.loadedTypes[7] {
		return e.UserSendMessage, nil
	}
	return nil, &NotLoadedError{edge: "user_send_message"}
}

// UserSendNotificationOrErr returns the UserSendNotification value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserSendNotificationOrErr() ([]*Notification, error) {
	if e.loadedTypes[8] {
		return e.UserSendNotification, nil
	}
	return nil, &NotLoadedError{edge: "user_send_notification"}
}

// HasDepartmentOrErr returns the HasDepartment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) HasDepartmentOrErr() (*Department, error) {
	if e.loadedTypes[9] {
		if e.HasDepartment == nil {
			// The edge has_department was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.HasDepartment, nil
	}
	return nil, &NotLoadedError{edge: "has_department"}
}

// FromHospitalOrErr returns the FromHospital value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) FromHospitalOrErr() (*Hospital, error) {
	if e.loadedTypes[10] {
		if e.FromHospital == nil {
			// The edge from_hospital was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: hospital.Label}
		}
		return e.FromHospital, nil
	}
	return nil, &NotLoadedError{edge: "from_hospital"}
}

// UserHaveDiseaseOrErr returns the UserHaveDisease value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserHaveDiseaseOrErr() ([]*Disease, error) {
	if e.loadedTypes[11] {
		return e.UserHaveDisease, nil
	}
	return nil, &NotLoadedError{edge: "user_have_disease"}
}

// UserHaveRoleOrErr returns the UserHaveRole value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserHaveRoleOrErr() ([]*Role, error) {
	if e.loadedTypes[12] {
		return e.UserHaveRole, nil
	}
	return nil, &NotLoadedError{edge: "user_have_role"}
}

// WhoIsInThisChatOrErr returns the WhoIsInThisChat value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) WhoIsInThisChatOrErr() ([]*Chat, error) {
	if e.loadedTypes[13] {
		return e.WhoIsInThisChat, nil
	}
	return nil, &NotLoadedError{edge: "who_is_in_this_chat"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldUsername, user.FieldPassword:
			values[i] = new(sql.NullString)
		case user.ForeignKeys[0]: // department_department_has_doctor
			values[i] = new(sql.NullInt64)
		case user.ForeignKeys[1]: // hospital_hospital_has_doctor
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field department_department_has_doctor", value)
			} else if value.Valid {
				u.department_department_has_doctor = new(int)
				*u.department_department_has_doctor = int(value.Int64)
			}
		case user.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hospital_hospital_has_doctor", value)
			} else if value.Valid {
				u.hospital_hospital_has_doctor = new(int)
				*u.hospital_hospital_has_doctor = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryDoctorHasCertification queries the "doctor_has_certification" edge of the User entity.
func (u *User) QueryDoctorHasCertification() *CertificationQuery {
	return (&UserClient{config: u.config}).QueryDoctorHasCertification(u)
}

// QueryUserHasPInfo queries the "user_has_PInfo" edge of the User entity.
func (u *User) QueryUserHasPInfo() *PInfoQuery {
	return (&UserClient{config: u.config}).QueryUserHasPInfo(u)
}

// QueryDoctorSchedule queries the "doctor_schedule" edge of the User entity.
func (u *User) QueryDoctorSchedule() *ScheduleQuery {
	return (&UserClient{config: u.config}).QueryDoctorSchedule(u)
}

// QueryUserHaveTelecoms queries the "user_have_telecoms" edge of the User entity.
func (u *User) QueryUserHaveTelecoms() *TelecomQuery {
	return (&UserClient{config: u.config}).QueryUserHaveTelecoms(u)
}

// QueryDoctorRecordTreatment queries the "doctor_record_treatment" edge of the User entity.
func (u *User) QueryDoctorRecordTreatment() *TreatmentQuery {
	return (&UserClient{config: u.config}).QueryDoctorRecordTreatment(u)
}

// QueryUserHaveTreatment queries the "user_have_treatment" edge of the User entity.
func (u *User) QueryUserHaveTreatment() *TreatmentQuery {
	return (&UserClient{config: u.config}).QueryUserHaveTreatment(u)
}

// QueryUserHaveToken queries the "user_have_token" edge of the User entity.
func (u *User) QueryUserHaveToken() *TokenQuery {
	return (&UserClient{config: u.config}).QueryUserHaveToken(u)
}

// QueryUserSendMessage queries the "user_send_message" edge of the User entity.
func (u *User) QueryUserSendMessage() *MessageQuery {
	return (&UserClient{config: u.config}).QueryUserSendMessage(u)
}

// QueryUserSendNotification queries the "user_send_notification" edge of the User entity.
func (u *User) QueryUserSendNotification() *NotificationQuery {
	return (&UserClient{config: u.config}).QueryUserSendNotification(u)
}

// QueryHasDepartment queries the "has_department" edge of the User entity.
func (u *User) QueryHasDepartment() *DepartmentQuery {
	return (&UserClient{config: u.config}).QueryHasDepartment(u)
}

// QueryFromHospital queries the "from_hospital" edge of the User entity.
func (u *User) QueryFromHospital() *HospitalQuery {
	return (&UserClient{config: u.config}).QueryFromHospital(u)
}

// QueryUserHaveDisease queries the "user_have_disease" edge of the User entity.
func (u *User) QueryUserHaveDisease() *DiseaseQuery {
	return (&UserClient{config: u.config}).QueryUserHaveDisease(u)
}

// QueryUserHaveRole queries the "user_have_role" edge of the User entity.
func (u *User) QueryUserHaveRole() *RoleQuery {
	return (&UserClient{config: u.config}).QueryUserHaveRole(u)
}

// QueryWhoIsInThisChat queries the "who_is_in_this_chat" edge of the User entity.
func (u *User) QueryWhoIsInThisChat() *ChatQuery {
	return (&UserClient{config: u.config}).QueryWhoIsInThisChat(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", password=")
	builder.WriteString(u.Password)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
