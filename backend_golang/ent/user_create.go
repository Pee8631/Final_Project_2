// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/certification"
	"FinalProject/ent/chat"
	"FinalProject/ent/department"
	"FinalProject/ent/disease"
	"FinalProject/ent/hospital"
	"FinalProject/ent/message"
	"FinalProject/ent/notification"
	"FinalProject/ent/pinfo"
	"FinalProject/ent/role"
	"FinalProject/ent/schedule"
	"FinalProject/ent/telecom"
	"FinalProject/ent/token"
	"FinalProject/ent/treatment"
	"FinalProject/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUsername sets the "username" field.
func (uc *UserCreate) SetUsername(s string) *UserCreate {
	uc.mutation.SetUsername(s)
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// AddDoctorHasCertificationIDs adds the "doctor_has_certification" edge to the Certification entity by IDs.
func (uc *UserCreate) AddDoctorHasCertificationIDs(ids ...int) *UserCreate {
	uc.mutation.AddDoctorHasCertificationIDs(ids...)
	return uc
}

// AddDoctorHasCertification adds the "doctor_has_certification" edges to the Certification entity.
func (uc *UserCreate) AddDoctorHasCertification(c ...*Certification) *UserCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddDoctorHasCertificationIDs(ids...)
}

// AddUserHasPInfoIDs adds the "user_has_PInfo" edge to the PInfo entity by IDs.
func (uc *UserCreate) AddUserHasPInfoIDs(ids ...int) *UserCreate {
	uc.mutation.AddUserHasPInfoIDs(ids...)
	return uc
}

// AddUserHasPInfo adds the "user_has_PInfo" edges to the PInfo entity.
func (uc *UserCreate) AddUserHasPInfo(p ...*PInfo) *UserCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddUserHasPInfoIDs(ids...)
}

// AddDoctorScheduleIDs adds the "doctor_schedule" edge to the Schedule entity by IDs.
func (uc *UserCreate) AddDoctorScheduleIDs(ids ...int) *UserCreate {
	uc.mutation.AddDoctorScheduleIDs(ids...)
	return uc
}

// AddDoctorSchedule adds the "doctor_schedule" edges to the Schedule entity.
func (uc *UserCreate) AddDoctorSchedule(s ...*Schedule) *UserCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddDoctorScheduleIDs(ids...)
}

// AddUserHaveTelecomIDs adds the "user_have_telecoms" edge to the Telecom entity by IDs.
func (uc *UserCreate) AddUserHaveTelecomIDs(ids ...int) *UserCreate {
	uc.mutation.AddUserHaveTelecomIDs(ids...)
	return uc
}

// AddUserHaveTelecoms adds the "user_have_telecoms" edges to the Telecom entity.
func (uc *UserCreate) AddUserHaveTelecoms(t ...*Telecom) *UserCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddUserHaveTelecomIDs(ids...)
}

// AddDoctorRecordTreatmentIDs adds the "doctor_record_treatment" edge to the Treatment entity by IDs.
func (uc *UserCreate) AddDoctorRecordTreatmentIDs(ids ...int) *UserCreate {
	uc.mutation.AddDoctorRecordTreatmentIDs(ids...)
	return uc
}

// AddDoctorRecordTreatment adds the "doctor_record_treatment" edges to the Treatment entity.
func (uc *UserCreate) AddDoctorRecordTreatment(t ...*Treatment) *UserCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddDoctorRecordTreatmentIDs(ids...)
}

// AddUserHaveTreatmentIDs adds the "user_have_treatment" edge to the Treatment entity by IDs.
func (uc *UserCreate) AddUserHaveTreatmentIDs(ids ...int) *UserCreate {
	uc.mutation.AddUserHaveTreatmentIDs(ids...)
	return uc
}

// AddUserHaveTreatment adds the "user_have_treatment" edges to the Treatment entity.
func (uc *UserCreate) AddUserHaveTreatment(t ...*Treatment) *UserCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddUserHaveTreatmentIDs(ids...)
}

// AddUserHaveTokenIDs adds the "user_have_token" edge to the Token entity by IDs.
func (uc *UserCreate) AddUserHaveTokenIDs(ids ...int) *UserCreate {
	uc.mutation.AddUserHaveTokenIDs(ids...)
	return uc
}

// AddUserHaveToken adds the "user_have_token" edges to the Token entity.
func (uc *UserCreate) AddUserHaveToken(t ...*Token) *UserCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uc.AddUserHaveTokenIDs(ids...)
}

// AddUserSendMessageIDs adds the "user_send_message" edge to the Message entity by IDs.
func (uc *UserCreate) AddUserSendMessageIDs(ids ...int) *UserCreate {
	uc.mutation.AddUserSendMessageIDs(ids...)
	return uc
}

// AddUserSendMessage adds the "user_send_message" edges to the Message entity.
func (uc *UserCreate) AddUserSendMessage(m ...*Message) *UserCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddUserSendMessageIDs(ids...)
}

// AddUserSendNotificationIDs adds the "user_send_notification" edge to the Notification entity by IDs.
func (uc *UserCreate) AddUserSendNotificationIDs(ids ...int) *UserCreate {
	uc.mutation.AddUserSendNotificationIDs(ids...)
	return uc
}

// AddUserSendNotification adds the "user_send_notification" edges to the Notification entity.
func (uc *UserCreate) AddUserSendNotification(n ...*Notification) *UserCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return uc.AddUserSendNotificationIDs(ids...)
}

// SetHasDepartmentID sets the "has_department" edge to the Department entity by ID.
func (uc *UserCreate) SetHasDepartmentID(id int) *UserCreate {
	uc.mutation.SetHasDepartmentID(id)
	return uc
}

// SetNillableHasDepartmentID sets the "has_department" edge to the Department entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableHasDepartmentID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetHasDepartmentID(*id)
	}
	return uc
}

// SetHasDepartment sets the "has_department" edge to the Department entity.
func (uc *UserCreate) SetHasDepartment(d *Department) *UserCreate {
	return uc.SetHasDepartmentID(d.ID)
}

// SetFromHospitalID sets the "from_hospital" edge to the Hospital entity by ID.
func (uc *UserCreate) SetFromHospitalID(id int) *UserCreate {
	uc.mutation.SetFromHospitalID(id)
	return uc
}

// SetNillableFromHospitalID sets the "from_hospital" edge to the Hospital entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableFromHospitalID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetFromHospitalID(*id)
	}
	return uc
}

// SetFromHospital sets the "from_hospital" edge to the Hospital entity.
func (uc *UserCreate) SetFromHospital(h *Hospital) *UserCreate {
	return uc.SetFromHospitalID(h.ID)
}

// AddUserHaveDiseaseIDs adds the "user_have_disease" edge to the Disease entity by IDs.
func (uc *UserCreate) AddUserHaveDiseaseIDs(ids ...int) *UserCreate {
	uc.mutation.AddUserHaveDiseaseIDs(ids...)
	return uc
}

// AddUserHaveDisease adds the "user_have_disease" edges to the Disease entity.
func (uc *UserCreate) AddUserHaveDisease(d ...*Disease) *UserCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uc.AddUserHaveDiseaseIDs(ids...)
}

// AddUserHaveRoleIDs adds the "user_have_role" edge to the Role entity by IDs.
func (uc *UserCreate) AddUserHaveRoleIDs(ids ...int) *UserCreate {
	uc.mutation.AddUserHaveRoleIDs(ids...)
	return uc
}

// AddUserHaveRole adds the "user_have_role" edges to the Role entity.
func (uc *UserCreate) AddUserHaveRole(r ...*Role) *UserCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddUserHaveRoleIDs(ids...)
}

// AddWhoIsInThisChatIDs adds the "who_is_in_this_chat" edge to the Chat entity by IDs.
func (uc *UserCreate) AddWhoIsInThisChatIDs(ids ...int) *UserCreate {
	uc.mutation.AddWhoIsInThisChatIDs(ids...)
	return uc
}

// AddWhoIsInThisChat adds the "who_is_in_this_chat" edges to the Chat entity.
func (uc *UserCreate) AddWhoIsInThisChat(c ...*Chat) *UserCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddWhoIsInThisChatIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "User.username"`)}
	}
	if v, ok := uc.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUsername,
		})
		_node.Username = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
		_node.Password = value
	}
	if nodes := uc.mutation.DoctorHasCertificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DoctorHasCertificationTable,
			Columns: []string{user.DoctorHasCertificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: certification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserHasPInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserHasPInfoTable,
			Columns: []string{user.UserHasPInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: pinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.DoctorScheduleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DoctorScheduleTable,
			Columns: []string{user.DoctorScheduleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: schedule.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserHaveTelecomsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserHaveTelecomsTable,
			Columns: []string{user.UserHaveTelecomsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: telecom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.DoctorRecordTreatmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DoctorRecordTreatmentTable,
			Columns: []string{user.DoctorRecordTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserHaveTreatmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserHaveTreatmentTable,
			Columns: []string{user.UserHaveTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserHaveTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserHaveTokenTable,
			Columns: []string{user.UserHaveTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: token.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserSendMessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserSendMessageTable,
			Columns: []string{user.UserSendMessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: message.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserSendNotificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.UserSendNotificationTable,
			Columns: user.UserSendNotificationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: notification.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.HasDepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.HasDepartmentTable,
			Columns: []string{user.HasDepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.department_department_has_doctor = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.FromHospitalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.FromHospitalTable,
			Columns: []string{user.FromHospitalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hospital.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hospital_hospital_has_doctor = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserHaveDiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.UserHaveDiseaseTable,
			Columns: user.UserHaveDiseasePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserHaveRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.UserHaveRoleTable,
			Columns: user.UserHaveRolePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.WhoIsInThisChatIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.WhoIsInThisChatTable,
			Columns: user.WhoIsInThisChatPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: chat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
