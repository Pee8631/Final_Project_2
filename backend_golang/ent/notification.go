// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/notification"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Notification is the model entity for the Notification schema.
type Notification struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Message holds the value of the "Message" field.
	Message string `json:"Message,omitempty"`
	// CreatedDate holds the value of the "CreatedDate" field.
	CreatedDate time.Time `json:"CreatedDate,omitempty"`
	// RecipientId holds the value of the "RecipientId" field.
	RecipientId int `json:"RecipientId,omitempty"`
	// SenderId holds the value of the "SenderId" field.
	SenderId int `json:"SenderId,omitempty"`
	// AppointmentId holds the value of the "AppointmentId" field.
	AppointmentId int `json:"AppointmentId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NotificationQuery when eager-loading is set.
	Edges NotificationEdges `json:"edges"`
}

// NotificationEdges holds the relations/edges for other nodes in the graph.
type NotificationEdges struct {
	// UserNotification holds the value of the user_notification edge.
	UserNotification []*User `json:"user_notification,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserNotificationOrErr returns the UserNotification value or an error if the edge
// was not loaded in eager-loading.
func (e NotificationEdges) UserNotificationOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.UserNotification, nil
	}
	return nil, &NotLoadedError{edge: "user_notification"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Notification) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case notification.FieldID, notification.FieldRecipientId, notification.FieldSenderId, notification.FieldAppointmentId:
			values[i] = new(sql.NullInt64)
		case notification.FieldMessage:
			values[i] = new(sql.NullString)
		case notification.FieldCreatedDate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Notification", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Notification fields.
func (n *Notification) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case notification.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			n.ID = int(value.Int64)
		case notification.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Message", values[i])
			} else if value.Valid {
				n.Message = value.String
			}
		case notification.FieldCreatedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field CreatedDate", values[i])
			} else if value.Valid {
				n.CreatedDate = value.Time
			}
		case notification.FieldRecipientId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field RecipientId", values[i])
			} else if value.Valid {
				n.RecipientId = int(value.Int64)
			}
		case notification.FieldSenderId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field SenderId", values[i])
			} else if value.Valid {
				n.SenderId = int(value.Int64)
			}
		case notification.FieldAppointmentId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field AppointmentId", values[i])
			} else if value.Valid {
				n.AppointmentId = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUserNotification queries the "user_notification" edge of the Notification entity.
func (n *Notification) QueryUserNotification() *UserQuery {
	return (&NotificationClient{config: n.config}).QueryUserNotification(n)
}

// Update returns a builder for updating this Notification.
// Note that you need to call Notification.Unwrap() before calling this method if this Notification
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Notification) Update() *NotificationUpdateOne {
	return (&NotificationClient{config: n.config}).UpdateOne(n)
}

// Unwrap unwraps the Notification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Notification) Unwrap() *Notification {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Notification is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Notification) String() string {
	var builder strings.Builder
	builder.WriteString("Notification(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", Message=")
	builder.WriteString(n.Message)
	builder.WriteString(", CreatedDate=")
	builder.WriteString(n.CreatedDate.Format(time.ANSIC))
	builder.WriteString(", RecipientId=")
	builder.WriteString(fmt.Sprintf("%v", n.RecipientId))
	builder.WriteString(", SenderId=")
	builder.WriteString(fmt.Sprintf("%v", n.SenderId))
	builder.WriteString(", AppointmentId=")
	builder.WriteString(fmt.Sprintf("%v", n.AppointmentId))
	builder.WriteByte(')')
	return builder.String()
}

// Notifications is a parsable slice of Notification.
type Notifications []*Notification

func (n Notifications) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
