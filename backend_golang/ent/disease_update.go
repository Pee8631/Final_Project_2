// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/disease"
	"FinalProject/ent/predicate"
	"FinalProject/ent/user"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DiseaseUpdate is the builder for updating Disease entities.
type DiseaseUpdate struct {
	config
	hooks    []Hook
	mutation *DiseaseMutation
}

// Where appends a list predicates to the DiseaseUpdate builder.
func (du *DiseaseUpdate) Where(ps ...predicate.Disease) *DiseaseUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DiseaseUpdate) SetName(s string) *DiseaseUpdate {
	du.mutation.SetName(s)
	return du
}

// SetSymtoms sets the "symtoms" field.
func (du *DiseaseUpdate) SetSymtoms(s string) *DiseaseUpdate {
	du.mutation.SetSymtoms(s)
	return du
}

// AddDiseaseUserIDs adds the "disease_user" edge to the User entity by IDs.
func (du *DiseaseUpdate) AddDiseaseUserIDs(ids ...int) *DiseaseUpdate {
	du.mutation.AddDiseaseUserIDs(ids...)
	return du
}

// AddDiseaseUser adds the "disease_user" edges to the User entity.
func (du *DiseaseUpdate) AddDiseaseUser(u ...*User) *DiseaseUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.AddDiseaseUserIDs(ids...)
}

// Mutation returns the DiseaseMutation object of the builder.
func (du *DiseaseUpdate) Mutation() *DiseaseMutation {
	return du.mutation
}

// ClearDiseaseUser clears all "disease_user" edges to the User entity.
func (du *DiseaseUpdate) ClearDiseaseUser() *DiseaseUpdate {
	du.mutation.ClearDiseaseUser()
	return du
}

// RemoveDiseaseUserIDs removes the "disease_user" edge to User entities by IDs.
func (du *DiseaseUpdate) RemoveDiseaseUserIDs(ids ...int) *DiseaseUpdate {
	du.mutation.RemoveDiseaseUserIDs(ids...)
	return du
}

// RemoveDiseaseUser removes "disease_user" edges to User entities.
func (du *DiseaseUpdate) RemoveDiseaseUser(u ...*User) *DiseaseUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return du.RemoveDiseaseUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DiseaseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiseaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DiseaseUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DiseaseUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DiseaseUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DiseaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   disease.Table,
			Columns: disease.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: disease.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disease.FieldName,
		})
	}
	if value, ok := du.mutation.Symtoms(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disease.FieldSymtoms,
		})
	}
	if du.mutation.DiseaseUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   disease.DiseaseUserTable,
			Columns: disease.DiseaseUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedDiseaseUserIDs(); len(nodes) > 0 && !du.mutation.DiseaseUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   disease.DiseaseUserTable,
			Columns: disease.DiseaseUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DiseaseUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   disease.DiseaseUserTable,
			Columns: disease.DiseaseUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disease.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DiseaseUpdateOne is the builder for updating a single Disease entity.
type DiseaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiseaseMutation
}

// SetName sets the "name" field.
func (duo *DiseaseUpdateOne) SetName(s string) *DiseaseUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetSymtoms sets the "symtoms" field.
func (duo *DiseaseUpdateOne) SetSymtoms(s string) *DiseaseUpdateOne {
	duo.mutation.SetSymtoms(s)
	return duo
}

// AddDiseaseUserIDs adds the "disease_user" edge to the User entity by IDs.
func (duo *DiseaseUpdateOne) AddDiseaseUserIDs(ids ...int) *DiseaseUpdateOne {
	duo.mutation.AddDiseaseUserIDs(ids...)
	return duo
}

// AddDiseaseUser adds the "disease_user" edges to the User entity.
func (duo *DiseaseUpdateOne) AddDiseaseUser(u ...*User) *DiseaseUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.AddDiseaseUserIDs(ids...)
}

// Mutation returns the DiseaseMutation object of the builder.
func (duo *DiseaseUpdateOne) Mutation() *DiseaseMutation {
	return duo.mutation
}

// ClearDiseaseUser clears all "disease_user" edges to the User entity.
func (duo *DiseaseUpdateOne) ClearDiseaseUser() *DiseaseUpdateOne {
	duo.mutation.ClearDiseaseUser()
	return duo
}

// RemoveDiseaseUserIDs removes the "disease_user" edge to User entities by IDs.
func (duo *DiseaseUpdateOne) RemoveDiseaseUserIDs(ids ...int) *DiseaseUpdateOne {
	duo.mutation.RemoveDiseaseUserIDs(ids...)
	return duo
}

// RemoveDiseaseUser removes "disease_user" edges to User entities.
func (duo *DiseaseUpdateOne) RemoveDiseaseUser(u ...*User) *DiseaseUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return duo.RemoveDiseaseUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DiseaseUpdateOne) Select(field string, fields ...string) *DiseaseUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Disease entity.
func (duo *DiseaseUpdateOne) Save(ctx context.Context) (*Disease, error) {
	var (
		err  error
		node *Disease
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiseaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DiseaseUpdateOne) SaveX(ctx context.Context) *Disease {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DiseaseUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DiseaseUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DiseaseUpdateOne) sqlSave(ctx context.Context) (_node *Disease, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   disease.Table,
			Columns: disease.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: disease.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Disease.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, disease.FieldID)
		for _, f := range fields {
			if !disease.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != disease.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disease.FieldName,
		})
	}
	if value, ok := duo.mutation.Symtoms(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disease.FieldSymtoms,
		})
	}
	if duo.mutation.DiseaseUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   disease.DiseaseUserTable,
			Columns: disease.DiseaseUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedDiseaseUserIDs(); len(nodes) > 0 && !duo.mutation.DiseaseUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   disease.DiseaseUserTable,
			Columns: disease.DiseaseUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DiseaseUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   disease.DiseaseUserTable,
			Columns: disease.DiseaseUserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Disease{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disease.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
