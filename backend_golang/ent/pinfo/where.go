// Code generated by entc, DO NOT EDIT.

package pinfo

import (
	"FinalProject/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IdCardNumber applies equality check predicate on the "idCardNumber" field. It's identical to IdCardNumberEQ.
func IdCardNumber(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdCardNumber), v))
	})
}

// FirstName applies equality check predicate on the "firstName" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// LastName applies equality check predicate on the "lastName" field. It's identical to LastNameEQ.
func LastName(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// BrithDate applies equality check predicate on the "brithDate" field. It's identical to BrithDateEQ.
func BrithDate(v time.Time) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrithDate), v))
	})
}

// BloodGroup applies equality check predicate on the "bloodGroup" field. It's identical to BloodGroupEQ.
func BloodGroup(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBloodGroup), v))
	})
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// IdCardNumberEQ applies the EQ predicate on the "idCardNumber" field.
func IdCardNumberEQ(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdCardNumber), v))
	})
}

// IdCardNumberNEQ applies the NEQ predicate on the "idCardNumber" field.
func IdCardNumberNEQ(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIdCardNumber), v))
	})
}

// IdCardNumberIn applies the In predicate on the "idCardNumber" field.
func IdCardNumberIn(vs ...string) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIdCardNumber), v...))
	})
}

// IdCardNumberNotIn applies the NotIn predicate on the "idCardNumber" field.
func IdCardNumberNotIn(vs ...string) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIdCardNumber), v...))
	})
}

// IdCardNumberGT applies the GT predicate on the "idCardNumber" field.
func IdCardNumberGT(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIdCardNumber), v))
	})
}

// IdCardNumberGTE applies the GTE predicate on the "idCardNumber" field.
func IdCardNumberGTE(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIdCardNumber), v))
	})
}

// IdCardNumberLT applies the LT predicate on the "idCardNumber" field.
func IdCardNumberLT(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIdCardNumber), v))
	})
}

// IdCardNumberLTE applies the LTE predicate on the "idCardNumber" field.
func IdCardNumberLTE(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIdCardNumber), v))
	})
}

// IdCardNumberContains applies the Contains predicate on the "idCardNumber" field.
func IdCardNumberContains(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIdCardNumber), v))
	})
}

// IdCardNumberHasPrefix applies the HasPrefix predicate on the "idCardNumber" field.
func IdCardNumberHasPrefix(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIdCardNumber), v))
	})
}

// IdCardNumberHasSuffix applies the HasSuffix predicate on the "idCardNumber" field.
func IdCardNumberHasSuffix(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIdCardNumber), v))
	})
}

// IdCardNumberEqualFold applies the EqualFold predicate on the "idCardNumber" field.
func IdCardNumberEqualFold(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIdCardNumber), v))
	})
}

// IdCardNumberContainsFold applies the ContainsFold predicate on the "idCardNumber" field.
func IdCardNumberContainsFold(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIdCardNumber), v))
	})
}

// FirstNameEQ applies the EQ predicate on the "firstName" field.
func FirstNameEQ(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// FirstNameNEQ applies the NEQ predicate on the "firstName" field.
func FirstNameNEQ(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstName), v))
	})
}

// FirstNameIn applies the In predicate on the "firstName" field.
func FirstNameIn(vs ...string) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstName), v...))
	})
}

// FirstNameNotIn applies the NotIn predicate on the "firstName" field.
func FirstNameNotIn(vs ...string) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstName), v...))
	})
}

// FirstNameGT applies the GT predicate on the "firstName" field.
func FirstNameGT(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstName), v))
	})
}

// FirstNameGTE applies the GTE predicate on the "firstName" field.
func FirstNameGTE(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstName), v))
	})
}

// FirstNameLT applies the LT predicate on the "firstName" field.
func FirstNameLT(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstName), v))
	})
}

// FirstNameLTE applies the LTE predicate on the "firstName" field.
func FirstNameLTE(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstName), v))
	})
}

// FirstNameContains applies the Contains predicate on the "firstName" field.
func FirstNameContains(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstName), v))
	})
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "firstName" field.
func FirstNameHasPrefix(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstName), v))
	})
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "firstName" field.
func FirstNameHasSuffix(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstName), v))
	})
}

// FirstNameEqualFold applies the EqualFold predicate on the "firstName" field.
func FirstNameEqualFold(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstName), v))
	})
}

// FirstNameContainsFold applies the ContainsFold predicate on the "firstName" field.
func FirstNameContainsFold(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstName), v))
	})
}

// LastNameEQ applies the EQ predicate on the "lastName" field.
func LastNameEQ(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// LastNameNEQ applies the NEQ predicate on the "lastName" field.
func LastNameNEQ(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastName), v))
	})
}

// LastNameIn applies the In predicate on the "lastName" field.
func LastNameIn(vs ...string) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastName), v...))
	})
}

// LastNameNotIn applies the NotIn predicate on the "lastName" field.
func LastNameNotIn(vs ...string) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastName), v...))
	})
}

// LastNameGT applies the GT predicate on the "lastName" field.
func LastNameGT(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastName), v))
	})
}

// LastNameGTE applies the GTE predicate on the "lastName" field.
func LastNameGTE(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastName), v))
	})
}

// LastNameLT applies the LT predicate on the "lastName" field.
func LastNameLT(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastName), v))
	})
}

// LastNameLTE applies the LTE predicate on the "lastName" field.
func LastNameLTE(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastName), v))
	})
}

// LastNameContains applies the Contains predicate on the "lastName" field.
func LastNameContains(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastName), v))
	})
}

// LastNameHasPrefix applies the HasPrefix predicate on the "lastName" field.
func LastNameHasPrefix(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastName), v))
	})
}

// LastNameHasSuffix applies the HasSuffix predicate on the "lastName" field.
func LastNameHasSuffix(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastName), v))
	})
}

// LastNameEqualFold applies the EqualFold predicate on the "lastName" field.
func LastNameEqualFold(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastName), v))
	})
}

// LastNameContainsFold applies the ContainsFold predicate on the "lastName" field.
func LastNameContainsFold(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastName), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...int) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...int) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGender), v))
	})
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGender), v))
	})
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGender), v))
	})
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v int) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGender), v))
	})
}

// BrithDateEQ applies the EQ predicate on the "brithDate" field.
func BrithDateEQ(v time.Time) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrithDate), v))
	})
}

// BrithDateNEQ applies the NEQ predicate on the "brithDate" field.
func BrithDateNEQ(v time.Time) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrithDate), v))
	})
}

// BrithDateIn applies the In predicate on the "brithDate" field.
func BrithDateIn(vs ...time.Time) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBrithDate), v...))
	})
}

// BrithDateNotIn applies the NotIn predicate on the "brithDate" field.
func BrithDateNotIn(vs ...time.Time) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBrithDate), v...))
	})
}

// BrithDateGT applies the GT predicate on the "brithDate" field.
func BrithDateGT(v time.Time) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBrithDate), v))
	})
}

// BrithDateGTE applies the GTE predicate on the "brithDate" field.
func BrithDateGTE(v time.Time) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBrithDate), v))
	})
}

// BrithDateLT applies the LT predicate on the "brithDate" field.
func BrithDateLT(v time.Time) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBrithDate), v))
	})
}

// BrithDateLTE applies the LTE predicate on the "brithDate" field.
func BrithDateLTE(v time.Time) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBrithDate), v))
	})
}

// BrithDateIsNil applies the IsNil predicate on the "brithDate" field.
func BrithDateIsNil() predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBrithDate)))
	})
}

// BrithDateNotNil applies the NotNil predicate on the "brithDate" field.
func BrithDateNotNil() predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBrithDate)))
	})
}

// BloodGroupEQ applies the EQ predicate on the "bloodGroup" field.
func BloodGroupEQ(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBloodGroup), v))
	})
}

// BloodGroupNEQ applies the NEQ predicate on the "bloodGroup" field.
func BloodGroupNEQ(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBloodGroup), v))
	})
}

// BloodGroupIn applies the In predicate on the "bloodGroup" field.
func BloodGroupIn(vs ...string) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBloodGroup), v...))
	})
}

// BloodGroupNotIn applies the NotIn predicate on the "bloodGroup" field.
func BloodGroupNotIn(vs ...string) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBloodGroup), v...))
	})
}

// BloodGroupGT applies the GT predicate on the "bloodGroup" field.
func BloodGroupGT(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBloodGroup), v))
	})
}

// BloodGroupGTE applies the GTE predicate on the "bloodGroup" field.
func BloodGroupGTE(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBloodGroup), v))
	})
}

// BloodGroupLT applies the LT predicate on the "bloodGroup" field.
func BloodGroupLT(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBloodGroup), v))
	})
}

// BloodGroupLTE applies the LTE predicate on the "bloodGroup" field.
func BloodGroupLTE(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBloodGroup), v))
	})
}

// BloodGroupContains applies the Contains predicate on the "bloodGroup" field.
func BloodGroupContains(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBloodGroup), v))
	})
}

// BloodGroupHasPrefix applies the HasPrefix predicate on the "bloodGroup" field.
func BloodGroupHasPrefix(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBloodGroup), v))
	})
}

// BloodGroupHasSuffix applies the HasSuffix predicate on the "bloodGroup" field.
func BloodGroupHasSuffix(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBloodGroup), v))
	})
}

// BloodGroupEqualFold applies the EqualFold predicate on the "bloodGroup" field.
func BloodGroupEqualFold(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBloodGroup), v))
	})
}

// BloodGroupContainsFold applies the ContainsFold predicate on the "bloodGroup" field.
func BloodGroupContainsFold(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBloodGroup), v))
	})
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddress), v))
	})
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddress), v))
	})
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddress), v...))
	})
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.PInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddress), v...))
	})
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddress), v))
	})
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddress), v))
	})
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddress), v))
	})
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddress), v))
	})
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAddress), v))
	})
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAddress), v))
	})
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAddress), v))
	})
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAddress), v))
	})
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAddress), v))
	})
}

// HasWhoIsTheOwnerOfThisPInfo applies the HasEdge predicate on the "who_is_the_owner_of_this_PInfo" edge.
func HasWhoIsTheOwnerOfThisPInfo() predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WhoIsTheOwnerOfThisPInfoTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WhoIsTheOwnerOfThisPInfoTable, WhoIsTheOwnerOfThisPInfoColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWhoIsTheOwnerOfThisPInfoWith applies the HasEdge predicate on the "who_is_the_owner_of_this_PInfo" edge with a given conditions (other predicates).
func HasWhoIsTheOwnerOfThisPInfoWith(preds ...predicate.User) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(WhoIsTheOwnerOfThisPInfoInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WhoIsTheOwnerOfThisPInfoTable, WhoIsTheOwnerOfThisPInfoColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PInfo) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PInfo) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PInfo) predicate.PInfo {
	return predicate.PInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
