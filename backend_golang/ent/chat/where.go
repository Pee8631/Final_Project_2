// Code generated by entc, DO NOT EDIT.

package chat

import (
	"FinalProject/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ChatRoomName applies equality check predicate on the "Chat_room_name" field. It's identical to ChatRoomNameEQ.
func ChatRoomName(v string) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChatRoomName), v))
	})
}

// IsLockChat applies equality check predicate on the "IsLockChat" field. It's identical to IsLockChatEQ.
func IsLockChat(v bool) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLockChat), v))
	})
}

// ChatRoomNameEQ applies the EQ predicate on the "Chat_room_name" field.
func ChatRoomNameEQ(v string) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChatRoomName), v))
	})
}

// ChatRoomNameNEQ applies the NEQ predicate on the "Chat_room_name" field.
func ChatRoomNameNEQ(v string) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChatRoomName), v))
	})
}

// ChatRoomNameIn applies the In predicate on the "Chat_room_name" field.
func ChatRoomNameIn(vs ...string) predicate.Chat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChatRoomName), v...))
	})
}

// ChatRoomNameNotIn applies the NotIn predicate on the "Chat_room_name" field.
func ChatRoomNameNotIn(vs ...string) predicate.Chat {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Chat(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChatRoomName), v...))
	})
}

// ChatRoomNameGT applies the GT predicate on the "Chat_room_name" field.
func ChatRoomNameGT(v string) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChatRoomName), v))
	})
}

// ChatRoomNameGTE applies the GTE predicate on the "Chat_room_name" field.
func ChatRoomNameGTE(v string) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChatRoomName), v))
	})
}

// ChatRoomNameLT applies the LT predicate on the "Chat_room_name" field.
func ChatRoomNameLT(v string) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChatRoomName), v))
	})
}

// ChatRoomNameLTE applies the LTE predicate on the "Chat_room_name" field.
func ChatRoomNameLTE(v string) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChatRoomName), v))
	})
}

// ChatRoomNameContains applies the Contains predicate on the "Chat_room_name" field.
func ChatRoomNameContains(v string) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChatRoomName), v))
	})
}

// ChatRoomNameHasPrefix applies the HasPrefix predicate on the "Chat_room_name" field.
func ChatRoomNameHasPrefix(v string) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChatRoomName), v))
	})
}

// ChatRoomNameHasSuffix applies the HasSuffix predicate on the "Chat_room_name" field.
func ChatRoomNameHasSuffix(v string) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChatRoomName), v))
	})
}

// ChatRoomNameEqualFold applies the EqualFold predicate on the "Chat_room_name" field.
func ChatRoomNameEqualFold(v string) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChatRoomName), v))
	})
}

// ChatRoomNameContainsFold applies the ContainsFold predicate on the "Chat_room_name" field.
func ChatRoomNameContainsFold(v string) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChatRoomName), v))
	})
}

// IsLockChatEQ applies the EQ predicate on the "IsLockChat" field.
func IsLockChatEQ(v bool) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLockChat), v))
	})
}

// IsLockChatNEQ applies the NEQ predicate on the "IsLockChat" field.
func IsLockChatNEQ(v bool) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsLockChat), v))
	})
}

// HasChatUser applies the HasEdge predicate on the "chat_user" edge.
func HasChatUser() predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChatUserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ChatUserTable, ChatUserPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChatUserWith applies the HasEdge predicate on the "chat_user" edge with a given conditions (other predicates).
func HasChatUserWith(preds ...predicate.User) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChatUserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ChatUserTable, ChatUserPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChatMessage applies the HasEdge predicate on the "chat_message" edge.
func HasChatMessage() predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChatMessageTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChatMessageTable, ChatMessageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChatMessageWith applies the HasEdge predicate on the "chat_message" edge with a given conditions (other predicates).
func HasChatMessageWith(preds ...predicate.Message) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChatMessageInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChatMessageTable, ChatMessageColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChatAppointment applies the HasEdge predicate on the "chat_appointment" edge.
func HasChatAppointment() predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChatAppointmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChatAppointmentTable, ChatAppointmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChatAppointmentWith applies the HasEdge predicate on the "chat_appointment" edge with a given conditions (other predicates).
func HasChatAppointmentWith(preds ...predicate.Appointment) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChatAppointmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChatAppointmentTable, ChatAppointmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Chat) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Chat) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Chat) predicate.Chat {
	return predicate.Chat(func(s *sql.Selector) {
		p(s.Not())
	})
}
