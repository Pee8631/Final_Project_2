// Code generated by entc, DO NOT EDIT.

package ent

import (
	"FinalProject/ent/appointment"
	"FinalProject/ent/chat"
	"FinalProject/ent/schedule"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Appointment is the model entity for the Appointment schema.
type Appointment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ReasonForAppointment holds the value of the "reasonForAppointment" field.
	ReasonForAppointment string `json:"reasonForAppointment,omitempty"`
	// Detail holds the value of the "detail" field.
	Detail string `json:"detail,omitempty"`
	// StartTime holds the value of the "startTime" field.
	StartTime time.Time `json:"startTime,omitempty"`
	// EndTime holds the value of the "endTime" field.
	EndTime time.Time `json:"endTime,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// DoctorId holds the value of the "DoctorId" field.
	DoctorId int `json:"DoctorId,omitempty"`
	// UserId holds the value of the "UserId" field.
	UserId int `json:"UserId,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppointmentQuery when eager-loading is set.
	Edges                         AppointmentEdges `json:"edges"`
	chat_chat_appointment         *int
	schedule_schedule_appointment *int
}

// AppointmentEdges holds the relations/edges for other nodes in the graph.
type AppointmentEdges struct {
	// AppointmentSchedule holds the value of the appointment_schedule edge.
	AppointmentSchedule *Schedule `json:"appointment_schedule,omitempty"`
	// AppointmentChat holds the value of the appointment_chat edge.
	AppointmentChat *Chat `json:"appointment_chat,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AppointmentScheduleOrErr returns the AppointmentSchedule value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentEdges) AppointmentScheduleOrErr() (*Schedule, error) {
	if e.loadedTypes[0] {
		if e.AppointmentSchedule == nil {
			// The edge appointment_schedule was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: schedule.Label}
		}
		return e.AppointmentSchedule, nil
	}
	return nil, &NotLoadedError{edge: "appointment_schedule"}
}

// AppointmentChatOrErr returns the AppointmentChat value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentEdges) AppointmentChatOrErr() (*Chat, error) {
	if e.loadedTypes[1] {
		if e.AppointmentChat == nil {
			// The edge appointment_chat was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: chat.Label}
		}
		return e.AppointmentChat, nil
	}
	return nil, &NotLoadedError{edge: "appointment_chat"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Appointment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appointment.FieldID, appointment.FieldDoctorId, appointment.FieldUserId:
			values[i] = new(sql.NullInt64)
		case appointment.FieldReasonForAppointment, appointment.FieldDetail, appointment.FieldStatus:
			values[i] = new(sql.NullString)
		case appointment.FieldStartTime, appointment.FieldEndTime:
			values[i] = new(sql.NullTime)
		case appointment.ForeignKeys[0]: // chat_chat_appointment
			values[i] = new(sql.NullInt64)
		case appointment.ForeignKeys[1]: // schedule_schedule_appointment
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Appointment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Appointment fields.
func (a *Appointment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appointment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case appointment.FieldReasonForAppointment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reasonForAppointment", values[i])
			} else if value.Valid {
				a.ReasonForAppointment = value.String
			}
		case appointment.FieldDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field detail", values[i])
			} else if value.Valid {
				a.Detail = value.String
			}
		case appointment.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startTime", values[i])
			} else if value.Valid {
				a.StartTime = value.Time
			}
		case appointment.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field endTime", values[i])
			} else if value.Valid {
				a.EndTime = value.Time
			}
		case appointment.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = value.String
			}
		case appointment.FieldDoctorId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field DoctorId", values[i])
			} else if value.Valid {
				a.DoctorId = int(value.Int64)
			}
		case appointment.FieldUserId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field UserId", values[i])
			} else if value.Valid {
				a.UserId = int(value.Int64)
			}
		case appointment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field chat_chat_appointment", value)
			} else if value.Valid {
				a.chat_chat_appointment = new(int)
				*a.chat_chat_appointment = int(value.Int64)
			}
		case appointment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field schedule_schedule_appointment", value)
			} else if value.Valid {
				a.schedule_schedule_appointment = new(int)
				*a.schedule_schedule_appointment = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAppointmentSchedule queries the "appointment_schedule" edge of the Appointment entity.
func (a *Appointment) QueryAppointmentSchedule() *ScheduleQuery {
	return (&AppointmentClient{config: a.config}).QueryAppointmentSchedule(a)
}

// QueryAppointmentChat queries the "appointment_chat" edge of the Appointment entity.
func (a *Appointment) QueryAppointmentChat() *ChatQuery {
	return (&AppointmentClient{config: a.config}).QueryAppointmentChat(a)
}

// Update returns a builder for updating this Appointment.
// Note that you need to call Appointment.Unwrap() before calling this method if this Appointment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Appointment) Update() *AppointmentUpdateOne {
	return (&AppointmentClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Appointment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Appointment) Unwrap() *Appointment {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Appointment is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Appointment) String() string {
	var builder strings.Builder
	builder.WriteString("Appointment(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", reasonForAppointment=")
	builder.WriteString(a.ReasonForAppointment)
	builder.WriteString(", detail=")
	builder.WriteString(a.Detail)
	builder.WriteString(", startTime=")
	builder.WriteString(a.StartTime.Format(time.ANSIC))
	builder.WriteString(", endTime=")
	builder.WriteString(a.EndTime.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(a.Status)
	builder.WriteString(", DoctorId=")
	builder.WriteString(fmt.Sprintf("%v", a.DoctorId))
	builder.WriteString(", UserId=")
	builder.WriteString(fmt.Sprintf("%v", a.UserId))
	builder.WriteByte(')')
	return builder.String()
}

// Appointments is a parsable slice of Appointment.
type Appointments []*Appointment

func (a Appointments) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
