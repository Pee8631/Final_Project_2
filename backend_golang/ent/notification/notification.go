// Code generated by entc, DO NOT EDIT.

package notification

const (
	// Label holds the string label denoting the notification type in the database.
	Label = "notification"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldCreatedDate holds the string denoting the createddate field in the database.
	FieldCreatedDate = "created_date"
	// FieldRecipientId holds the string denoting the recipientid field in the database.
	FieldRecipientId = "recipient_id"
	// FieldSenderId holds the string denoting the senderid field in the database.
	FieldSenderId = "sender_id"
	// FieldAppointmentId holds the string denoting the appointmentid field in the database.
	FieldAppointmentId = "appointment_id"
	// EdgeUserNotification holds the string denoting the user_notification edge name in mutations.
	EdgeUserNotification = "user_notification"
	// Table holds the table name of the notification in the database.
	Table = "notifications"
	// UserNotificationTable is the table that holds the user_notification relation/edge. The primary key declared below.
	UserNotificationTable = "user_user_send_notification"
	// UserNotificationInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserNotificationInverseTable = "users"
)

// Columns holds all SQL columns for notification fields.
var Columns = []string{
	FieldID,
	FieldMessage,
	FieldCreatedDate,
	FieldRecipientId,
	FieldSenderId,
	FieldAppointmentId,
}

var (
	// UserNotificationPrimaryKey and UserNotificationColumn2 are the table columns denoting the
	// primary key for the user_notification relation (M2M).
	UserNotificationPrimaryKey = []string{"user_id", "notification_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
